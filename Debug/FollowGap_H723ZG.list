
FollowGap_H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a470  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800a890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f8  24000014  0800a8a4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400040c  0800a8a4  0002040c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016773  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024d2  00000000  00000000  000367b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c8  00000000  00000000  00038c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001000  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032ba8  00000000  00000000  0003ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000165d5  00000000  00000000  0006d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c305  00000000  00000000  00083ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d01d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000482c  00000000  00000000  001d0224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a728 	.word	0x0800a728

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	0800a728 	.word	0x0800a728

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <CalCRC8>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	81bb      	strh	r3, [r7, #12]
 8000628:	e00d      	b.n	8000646 <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 800062a:	89bb      	ldrh	r3, [r7, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4053      	eors	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <CalCRC8+0x4c>)
 800063c:	5c9b      	ldrb	r3, [r3, r2]
 800063e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 8000640:	89bb      	ldrh	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	81bb      	strh	r3, [r7, #12]
 8000646:	78fb      	ldrb	r3, [r7, #3]
 8000648:	b29b      	uxth	r3, r3
 800064a:	89ba      	ldrh	r2, [r7, #12]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3ec      	bcc.n	800062a <CalCRC8+0x16>
	}
	return crc;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	0800a740 	.word	0x0800a740

08000664 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	if(lidar_data == 0x54 && data_buffer[0] == 0)
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_UART_RxCpltCallback+0x6c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b54      	cmp	r3, #84	; 0x54
 8000672:	d111      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x34>
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_UART_RxCpltCallback+0x70>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10d      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x34>
	{
		data_buffer[count] = lidar_data;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_UART_RxCpltCallback+0x6c>)
 8000684:	7819      	ldrb	r1, [r3, #0]
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_UART_RxCpltCallback+0x70>)
 8000688:	5499      	strb	r1, [r3, r2]
		count++;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e014      	b.n	80006c2 <HAL_UART_RxCpltCallback+0x5e>
	}
	else if (count <= 46 && data_buffer[0] == 0x54)
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b2e      	cmp	r3, #46	; 0x2e
 800069e:	d811      	bhi.n	80006c4 <HAL_UART_RxCpltCallback+0x60>
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_UART_RxCpltCallback+0x70>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b54      	cmp	r3, #84	; 0x54
 80006a6:	d10d      	bne.n	80006c4 <HAL_UART_RxCpltCallback+0x60>
	{
		data_buffer[count] = lidar_data;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_UART_RxCpltCallback+0x6c>)
 80006b0:	7819      	ldrb	r1, [r3, #0]
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_UART_RxCpltCallback+0x70>)
 80006b4:	5499      	strb	r1, [r3, r2]
		count++;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_UART_RxCpltCallback+0x74>)
 80006c0:	701a      	strb	r2, [r3, #0]
	}
	return;
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
}
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	24000268 	.word	0x24000268
 80006d4:	2400026c 	.word	0x2400026c
 80006d8:	2400029b 	.word	0x2400029b

080006dc <CreateBubble>:
		frame[i] = (floor)(moving_average)/5;
	}
	return;
}
void CreateBubble(uint16_t *frame)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	uint8_t bubble_radius = 5;
 80006e4:	2305      	movs	r3, #5
 80006e6:	727b      	strb	r3, [r7, #9]
	uint8_t min_index = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
	uint16_t min_value = 20000;
 80006ec:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006f0:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 1; i < 180; i++)
 80006f2:	2301      	movs	r3, #1
 80006f4:	72fb      	strb	r3, [r7, #11]
 80006f6:	e041      	b.n	800077c <CreateBubble+0xa0>
	{
		if(frame[i] == 0)
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d127      	bne.n	8000756 <CreateBubble+0x7a>
		{
			frame[i] = floor((frame[i-1] + frame[i+1])/2.0);
 8000706:	7afa      	ldrb	r2, [r7, #11]
 8000708:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	3301      	adds	r3, #1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	440b      	add	r3, r1
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000732:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000736:	eeb0 0b46 	vmov.f64	d0, d6
 800073a:	f009 ff81 	bl	800a640 <floor>
 800073e:	eeb0 7b40 	vmov.f64	d7, d0
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800074e:	ee17 2a90 	vmov	r2, s15
 8000752:	b292      	uxth	r2, r2
 8000754:	801a      	strh	r2, [r3, #0]
		}
		if(frame[i] < min_value)
 8000756:	7afb      	ldrb	r3, [r7, #11]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	89ba      	ldrh	r2, [r7, #12]
 8000762:	429a      	cmp	r2, r3
 8000764:	d907      	bls.n	8000776 <CreateBubble+0x9a>
		{
			min_index = i;
 8000766:	7afb      	ldrb	r3, [r7, #11]
 8000768:	73fb      	strb	r3, [r7, #15]
			min_value = frame[i];
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 1; i < 180; i++)
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	3301      	adds	r3, #1
 800077a:	72fb      	strb	r3, [r7, #11]
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	2bb3      	cmp	r3, #179	; 0xb3
 8000780:	d9ba      	bls.n	80006f8 <CreateBubble+0x1c>
		}

	}
	for(uint8_t i = min_index - bubble_radius ; i <= min_index + bubble_radius; i++)
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	7a7b      	ldrb	r3, [r7, #9]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	72bb      	strb	r3, [r7, #10]
 800078a:	e008      	b.n	800079e <CreateBubble+0xc2>
	{
		frame[i] = 0;
 800078c:	7abb      	ldrb	r3, [r7, #10]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = min_index - bubble_radius ; i <= min_index + bubble_radius; i++)
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	3301      	adds	r3, #1
 800079c:	72bb      	strb	r3, [r7, #10]
 800079e:	7aba      	ldrb	r2, [r7, #10]
 80007a0:	7bf9      	ldrb	r1, [r7, #15]
 80007a2:	7a7b      	ldrb	r3, [r7, #9]
 80007a4:	440b      	add	r3, r1
 80007a6:	429a      	cmp	r2, r3
 80007a8:	ddf0      	ble.n	800078c <CreateBubble+0xb0>
	}
	return;
 80007aa:	bf00      	nop
}
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <AssignValues>:
LiDARFrameTypeDef AssignValues(uint8_t package[])
{
 80007b4:	b4b0      	push	{r4, r5, r7}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	LiDARFrameTypeDef lf = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	831a      	strh	r2, [r3, #24]

	lf.start_angle = (package[5] << 8 | package[4]) / 100;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	3305      	adds	r3, #5
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	3204      	adds	r2, #4
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <AssignValues+0xb0>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1152      	asrs	r2, r2, #5
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 12; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
 80007f6:	e01e      	b.n	8000836 <AssignValues+0x82>
	{
		lf.distance[i] = (package[8 + i * 3 - 1] << 8 | package[8 + i * 3 - 2]);
 80007f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	3307      	adds	r3, #7
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b219      	sxth	r1, r3
 800080c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	3306      	adds	r3, #6
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b21b      	sxth	r3, r3
 800081e:	430b      	orrs	r3, r1
 8000820:	b21b      	sxth	r3, r3
 8000822:	b29a      	uxth	r2, r3
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	3328      	adds	r3, #40	; 0x28
 800082a:	443b      	add	r3, r7
 800082c:	f823 2c1e 	strh.w	r2, [r3, #-30]
	for(int i = 0; i < 12; i++)
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	3301      	adds	r3, #1
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	2b0b      	cmp	r3, #11
 800083a:	dddd      	ble.n	80007f8 <AssignValues+0x44>
	}

	return lf;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	461d      	mov	r5, r3
 8000840:	f107 0408 	add.w	r4, r7, #8
 8000844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000846:	6028      	str	r0, [r5, #0]
 8000848:	6069      	str	r1, [r5, #4]
 800084a:	60aa      	str	r2, [r5, #8]
 800084c:	60eb      	str	r3, [r5, #12]
 800084e:	cc03      	ldmia	r4!, {r0, r1}
 8000850:	6128      	str	r0, [r5, #16]
 8000852:	6169      	str	r1, [r5, #20]
 8000854:	8823      	ldrh	r3, [r4, #0]
 8000856:	832b      	strh	r3, [r5, #24]
}
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	372c      	adds	r7, #44	; 0x2c
 800085c:	46bd      	mov	sp, r7
 800085e:	bcb0      	pop	{r4, r5, r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	51eb851f 	.word	0x51eb851f

08000868 <SetArray>:

void SetArray(uint16_t *frame)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 181; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e008      	b.n	8000888 <SetArray+0x20>
    {
        frame[i] = 1;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	2201      	movs	r2, #1
 8000880:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 181; i++)
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2bb4      	cmp	r3, #180	; 0xb4
 800088c:	d9f3      	bls.n	8000876 <SetArray+0xe>
    }
    return;
 800088e:	bf00      	nop
}
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	0000      	movs	r0, r0
 800089c:	0000      	movs	r0, r0
	...

080008a0 <FindBiggestGap>:

void FindBiggestGap(uint16_t *frame)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	ed2d 8b02 	vpush	{d8}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint8_t max_gap_index = 90;
 80008ac:	235a      	movs	r3, #90	; 0x5a
 80008ae:	73fb      	strb	r3, [r7, #15]
	uint8_t max_gap_length = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73bb      	strb	r3, [r7, #14]
	uint16_t minimum_gap = 1000;
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	817b      	strh	r3, [r7, #10]
	uint8_t gap_length;


	uint8_t i = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	733b      	strb	r3, [r7, #12]
	while (i <= 180)
 80008be:	e028      	b.n	8000912 <FindBiggestGap+0x72>
	{
		if (frame[i] >= minimum_gap)
 80008c0:	7b3b      	ldrb	r3, [r7, #12]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	897a      	ldrh	r2, [r7, #10]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d81d      	bhi.n	800090c <FindBiggestGap+0x6c>
		{
			gap_length = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	737b      	strb	r3, [r7, #13]
			for (; i <= 180 && frame[i] >= minimum_gap; i++)
 80008d4:	e005      	b.n	80008e2 <FindBiggestGap+0x42>
			{
				gap_length++;
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	3301      	adds	r3, #1
 80008da:	737b      	strb	r3, [r7, #13]
			for (; i <= 180 && frame[i] >= minimum_gap; i++)
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	733b      	strb	r3, [r7, #12]
 80008e2:	7b3b      	ldrb	r3, [r7, #12]
 80008e4:	2bb4      	cmp	r3, #180	; 0xb4
 80008e6:	d807      	bhi.n	80008f8 <FindBiggestGap+0x58>
 80008e8:	7b3b      	ldrb	r3, [r7, #12]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	897a      	ldrh	r2, [r7, #10]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d9ee      	bls.n	80008d6 <FindBiggestGap+0x36>
			}

			if (max_gap_length < gap_length)
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	7b7b      	ldrb	r3, [r7, #13]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d205      	bcs.n	800090c <FindBiggestGap+0x6c>
			{
				max_gap_index = i - gap_length;
 8000900:	7b3a      	ldrb	r2, [r7, #12]
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	73fb      	strb	r3, [r7, #15]
				max_gap_length = gap_length;
 8000908:	7b7b      	ldrb	r3, [r7, #13]
 800090a:	73bb      	strb	r3, [r7, #14]
			}
		}
		i++;
 800090c:	7b3b      	ldrb	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	733b      	strb	r3, [r7, #12]
	while (i <= 180)
 8000912:	7b3b      	ldrb	r3, [r7, #12]
 8000914:	2bb4      	cmp	r3, #180	; 0xb4
 8000916:	d9d3      	bls.n	80008c0 <FindBiggestGap+0x20>
	}

	if (max_gap_length >= 10) //test with variable turning angle
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	2b09      	cmp	r3, #9
 800091c:	d94f      	bls.n	80009be <FindBiggestGap+0x11e>
	{
		uint16_t steer_direction = max_gap_index + floor(max_gap_length/2.0);
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000932:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000936:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800093a:	eeb0 0b46 	vmov.f64	d0, d6
 800093e:	f009 fe7f 	bl	800a640 <floor>
 8000942:	eeb0 7b40 	vmov.f64	d7, d0
 8000946:	ee38 7b07 	vadd.f64	d7, d8, d7
 800094a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	813b      	strh	r3, [r7, #8]
		if(steer_direction >= 60 && steer_direction <= 120)
 8000954:	893b      	ldrh	r3, [r7, #8]
 8000956:	2b3b      	cmp	r3, #59	; 0x3b
 8000958:	d924      	bls.n	80009a4 <FindBiggestGap+0x104>
 800095a:	893b      	ldrh	r3, [r7, #8]
 800095c:	2b78      	cmp	r3, #120	; 0x78
 800095e:	d821      	bhi.n	80009a4 <FindBiggestGap+0x104>
		{
			steer_direction -= 60;
 8000960:	893b      	ldrh	r3, [r7, #8]
 8000962:	3b3c      	subs	r3, #60	; 0x3c
 8000964:	813b      	strh	r3, [r7, #8]
			steering_angle = 100 + floor(100*steer_direction/60.0);
 8000966:	893b      	ldrh	r3, [r7, #8]
 8000968:	2264      	movs	r2, #100	; 0x64
 800096a:	fb02 f303 	mul.w	r3, r2, r3
 800096e:	ee07 3a90 	vmov	s15, r3
 8000972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000976:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80009d8 <FindBiggestGap+0x138>
 800097a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800097e:	eeb0 0b46 	vmov.f64	d0, d6
 8000982:	f009 fe5d 	bl	800a640 <floor>
 8000986:	eeb0 7b40 	vmov.f64	d7, d0
 800098a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80009e0 <FindBiggestGap+0x140>
 800098e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000992:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000996:	edc7 7a00 	vstr	s15, [r7]
 800099a:	783b      	ldrb	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <FindBiggestGap+0x148>)
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e00c      	b.n	80009be <FindBiggestGap+0x11e>
		}
		else if(steer_direction < 60)
 80009a4:	893b      	ldrh	r3, [r7, #8]
 80009a6:	2b3b      	cmp	r3, #59	; 0x3b
 80009a8:	d803      	bhi.n	80009b2 <FindBiggestGap+0x112>
		{
			steering_angle = 100;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <FindBiggestGap+0x148>)
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e005      	b.n	80009be <FindBiggestGap+0x11e>
		}
		else if(steer_direction > 120)
 80009b2:	893b      	ldrh	r3, [r7, #8]
 80009b4:	2b78      	cmp	r3, #120	; 0x78
 80009b6:	d902      	bls.n	80009be <FindBiggestGap+0x11e>
		{
			steering_angle = 200;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <FindBiggestGap+0x148>)
 80009ba:	22c8      	movs	r2, #200	; 0xc8
 80009bc:	701a      	strb	r2, [r3, #0]
//			speed = 161;
//		}
	}

//	TIM1->CCR1 = speed;
	TIM1->CCR2 = steering_angle;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <FindBiggestGap+0x148>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <FindBiggestGap+0x14c>)
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38
	return;
 80009c6:	bf00      	nop
}
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	ecbd 8b02 	vpop	{d8}
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	f3af 8000 	nop.w
 80009d8:	00000000 	.word	0x00000000
 80009dc:	404e0000 	.word	0x404e0000
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40590000 	.word	0x40590000
 80009e8:	24000000 	.word	0x24000000
 80009ec:	40010000 	.word	0x40010000

080009f0 <FillArray>:

void FillArray(LiDARFrameTypeDef lf)
{
 80009f0:	b084      	sub	sp, #16
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f107 0c10 	add.w	ip, r7, #16
 80009fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Angle_Index = lf.start_angle;
 8000a00:	8a3b      	ldrh	r3, [r7, #16]
 8000a02:	80fb      	strh	r3, [r7, #6]
	if (Angle_Index <= 90 || Angle_Index >= 259)
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	2b5a      	cmp	r3, #90	; 0x5a
 8000a08:	d903      	bls.n	8000a12 <FillArray+0x22>
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000a10:	d93e      	bls.n	8000a90 <FillArray+0xa0>
	{
	    uint8_t i = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	717b      	strb	r3, [r7, #5]
	    if(Angle_Index >= 259)
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000a1c:	d910      	bls.n	8000a40 <FillArray+0x50>
	    {
	       if (Angle_Index < 270)
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000a24:	d207      	bcs.n	8000a36 <FillArray+0x46>
	       {
	          i = 270 - Angle_Index;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f1c3 030e 	rsb	r3, r3, #14
 8000a2e:	717b      	strb	r3, [r7, #5]
	          Angle_Index = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	80fb      	strh	r3, [r7, #6]
 8000a34:	e025      	b.n	8000a82 <FillArray+0x92>
	       }
	       else
	       {
	    	   Angle_Index -= 270;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	e020      	b.n	8000a82 <FillArray+0x92>
	       }

	    }
	    else
	    {
	    	Angle_Index += 90;
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	335a      	adds	r3, #90	; 0x5a
 8000a44:	80fb      	strh	r3, [r7, #6]
	    }
	    for(; i < 12 && Angle_Index <= 180; i++ , Angle_Index++)
 8000a46:	e01c      	b.n	8000a82 <FillArray+0x92>
	    {
	      uint16_t Distance = lf.distance[i];
 8000a48:	797b      	ldrb	r3, [r7, #5]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	3310      	adds	r3, #16
 8000a4e:	443b      	add	r3, r7
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	807b      	strh	r3, [r7, #2]

	      if (lidar_180[Angle_Index] == 1)
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <FillArray+0xb0>)
 8000a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d10a      	bne.n	8000a76 <FillArray+0x86>
			  {
				  lidar_180[Angle_Index] = Distance;
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <FillArray+0xb0>)
 8000a64:	887a      	ldrh	r2, [r7, #2]
 8000a66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  angle_count++;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <FillArray+0xb4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <FillArray+0xb4>)
 8000a74:	701a      	strb	r2, [r3, #0]
	    for(; i < 12 && Angle_Index <= 180; i++ , Angle_Index++)
 8000a76:	797b      	ldrb	r3, [r7, #5]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	717b      	strb	r3, [r7, #5]
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	797b      	ldrb	r3, [r7, #5]
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d803      	bhi.n	8000a90 <FillArray+0xa0>
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	2bb4      	cmp	r3, #180	; 0xb4
 8000a8c:	d9dc      	bls.n	8000a48 <FillArray+0x58>
			  }
		  }
	  }

	return;
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
}
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2400029c 	.word	0x2400029c
 8000aa4:	24000406 	.word	0x24000406

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 feb3 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f899 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 fabd 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f000 fa9b 	bl	8000ff4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000abe:	f000 fa45 	bl	8000f4c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ac2:	f000 fa8f 	bl	8000fe4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000ac6:	f000 f8ff 	bl	8000cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000aca:	f000 f999 	bl	8000e00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 f9f1 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //ESC
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <main+0x110>)
 8000ad6:	f006 fe35 	bl	8007744 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Servo
 8000ada:	2104      	movs	r1, #4
 8000adc:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <main+0x110>)
 8000ade:	f006 fe31 	bl	8007744 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Lidar PWM
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4835      	ldr	r0, [pc, #212]	; (8000bbc <main+0x114>)
 8000ae6:	f006 fe2d 	bl	8007744 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 550;
 8000aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aee:	f240 2226 	movw	r2, #550	; 0x226
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = steering_angle;
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <main+0x118>)
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <main+0x11c>)
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR1 = speed;
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <main+0x120>)
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <main+0x11c>)
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(2000);
 8000b04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b08:	f000 ff18 	bl	800193c <HAL_Delay>
  TIM2->CCR1 = 312;
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b10:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1a:	f000 ff0f 	bl	800193c <HAL_Delay>
  TIM1->CCR1 = 160;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <main+0x11c>)
 8000b20:	22a0      	movs	r2, #160	; 0xa0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34
  uint8_t crc_check_sum=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	77fb      	strb	r3, [r7, #31]
  LiDARFrameTypeDef lidar_frame;
  SetArray (lidar_180);
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <main+0x124>)
 8000b2a:	f7ff fe9d 	bl	8000868 <SetArray>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count <= 46)
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <main+0x128>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b2e      	cmp	r3, #46	; 0x2e
 8000b34:	d805      	bhi.n	8000b42 <main+0x9a>
	  {
		  HAL_UART_Receive_DMA(&huart2, &lidar_data, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4926      	ldr	r1, [pc, #152]	; (8000bd4 <main+0x12c>)
 8000b3a:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <main+0x130>)
 8000b3c:	f007 fd60 	bl	8008600 <HAL_UART_Receive_DMA>
 8000b40:	e7f5      	b.n	8000b2e <main+0x86>
	  }
	  else
	  {
			crc_check_sum = CalCRC8(data_buffer, 46);
 8000b42:	212e      	movs	r1, #46	; 0x2e
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <main+0x134>)
 8000b46:	f7ff fd65 	bl	8000614 <CalCRC8>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	77fb      	strb	r3, [r7, #31]
			if(crc_check_sum == data_buffer[46])
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <main+0x134>)
 8000b50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b54:	7ffa      	ldrb	r2, [r7, #31]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d122      	bne.n	8000ba0 <main+0xf8>
			{
				lidar_frame = AssignValues(data_buffer);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	491f      	ldr	r1, [pc, #124]	; (8000bdc <main+0x134>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe28 	bl	80007b4 <AssignValues>
				FillArray(lidar_frame);
 8000b64:	466b      	mov	r3, sp
 8000b66:	f107 0214 	add.w	r2, r7, #20
 8000b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b6c:	c303      	stmia	r3!, {r0, r1}
 8000b6e:	801a      	strh	r2, [r3, #0]
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b74:	f7ff ff3c 	bl	80009f0 <FillArray>
				if(angle_count >= 180)
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <main+0x138>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2bb3      	cmp	r3, #179	; 0xb3
 8000b7e:	d90f      	bls.n	8000ba0 <main+0xf8>
				{
//					PreProcess_lidar(lidar_180);
//					MovingAverage(lidar_180);
					CreateBubble(lidar_180);
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <main+0x124>)
 8000b82:	f7ff fdab 	bl	80006dc <CreateBubble>
					FindBiggestGap(lidar_180);
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <main+0x124>)
 8000b88:	f7ff fe8a 	bl	80008a0 <FindBiggestGap>

					SetArray (lidar_180);
 8000b8c:	480f      	ldr	r0, [pc, #60]	; (8000bcc <main+0x124>)
 8000b8e:	f7ff fe6b 	bl	8000868 <SetArray>
					angle_count = 0;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <main+0x138>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <main+0x13c>)
 8000b9c:	f003 fffd 	bl	8004b9a <HAL_GPIO_TogglePin>
				}

			}
			memset(data_buffer, 0x00, 47);
 8000ba0:	222f      	movs	r2, #47	; 0x2f
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <main+0x134>)
 8000ba6:	f009 fd43 	bl	800a630 <memset>
			crc_check_sum = 0;	//to hold return value of crc function
 8000baa:	2300      	movs	r3, #0
 8000bac:	77fb      	strb	r3, [r7, #31]
			count = 0;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <main+0x128>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	  if(count <= 46)
 8000bb4:	e7bb      	b.n	8000b2e <main+0x86>
 8000bb6:	bf00      	nop
 8000bb8:	24000030 	.word	0x24000030
 8000bbc:	2400007c 	.word	0x2400007c
 8000bc0:	24000000 	.word	0x24000000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	24000001 	.word	0x24000001
 8000bcc:	2400029c 	.word	0x2400029c
 8000bd0:	2400029b 	.word	0x2400029b
 8000bd4:	24000268 	.word	0x24000268
 8000bd8:	240000c8 	.word	0x240000c8
 8000bdc:	2400026c 	.word	0x2400026c
 8000be0:	24000406 	.word	0x24000406
 8000be4:	58021000 	.word	0x58021000

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09c      	sub	sp, #112	; 0x70
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	224c      	movs	r2, #76	; 0x4c
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f009 fd1a 	bl	800a630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2220      	movs	r2, #32
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f009 fd14 	bl	800a630 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f003 ffe1 	bl	8004bd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c2a:	bf00      	nop
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c38:	d1f8      	bne.n	8000c2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c3a:	2321      	movs	r3, #33	; 0x21
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c50:	2304      	movs	r3, #4
 8000c52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000c54:	f240 1313 	movw	r3, #275	; 0x113
 8000c58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000c66:	2304      	movs	r3, #4
 8000c68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 ffe4 	bl	8004c44 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c82:	f000 fb15 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	233f      	movs	r3, #63	; 0x3f
 8000c88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c92:	2308      	movs	r3, #8
 8000c94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c9a:	2340      	movs	r3, #64	; 0x40
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2103      	movs	r1, #3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fba3 	bl	80053f8 <HAL_RCC_ClockConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cb8:	f000 fafa 	bl	80012b0 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3770      	adds	r7, #112	; 0x70
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58024800 	.word	0x58024800

08000cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b098      	sub	sp, #96	; 0x60
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2234      	movs	r2, #52	; 0x34
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 fc9b 	bl	800a630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000cfc:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <MX_TIM1_Init+0x134>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2750-1;
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d02:	f640 22bd 	movw	r2, #2749	; 0xabd
 8000d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d28:	4833      	ldr	r0, [pc, #204]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d2a:	f006 fcb3 	bl	8007694 <HAL_TIM_PWM_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000d34:	f000 fabc 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d48:	4619      	mov	r1, r3
 8000d4a:	482b      	ldr	r0, [pc, #172]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d4c:	f007 facc 	bl	80082e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d56:	f000 faab 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d80:	f006 fdfc 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d8a:	f000 fa91 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d92:	2204      	movs	r2, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000d98:	f006 fdf0 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000da2:	f000 fa85 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000ddc:	f007 fb20 	bl	8008420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000de6:	f000 fa63 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM1_Init+0x130>)
 8000dec:	f000 fab8 	bl	8001360 <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3760      	adds	r7, #96	; 0x60
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	24000030 	.word	0x24000030
 8000dfc:	40010000 	.word	0x40010000

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e2e:	2209      	movs	r2, #9
 8000e30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e4e:	f006 fc21 	bl	8007694 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 fa2a 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e6c:	f007 fa3c 	bl	80082e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e76:	f000 fa1b 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	; 0x60
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000e92:	f006 fd73 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e9c:	f000 fa08 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM2_Init+0xb0>)
 8000ea2:	f000 fa5d 	bl	8001360 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2400007c 	.word	0x2400007c

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000eba:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ec0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000efe:	f007 fb2f 	bl	8008560 <HAL_UART_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f08:	f000 f9d2 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000f10:	f009 fa9f 	bl	800a452 <HAL_UARTEx_SetTxFifoThreshold>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f1a:	f000 f9c9 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000f22:	f009 fad4 	bl	800a4ce <HAL_UARTEx_SetRxFifoThreshold>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f2c:	f000 f9c0 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_USART2_UART_Init+0x90>)
 8000f32:	f009 fa55 	bl	800a3e0 <HAL_UARTEx_DisableFifoMode>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f3c:	f000 f9b8 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	240000c8 	.word	0x240000c8
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <MX_USART3_UART_Init+0x94>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f94:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f96:	f007 fae3 	bl	8008560 <HAL_UART_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fa0:	f000 f986 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fa8:	f009 fa53 	bl	800a452 <HAL_UARTEx_SetTxFifoThreshold>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fb2:	f000 f97d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4808      	ldr	r0, [pc, #32]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fba:	f009 fa88 	bl	800a4ce <HAL_UARTEx_SetRxFifoThreshold>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fc4:	f000 f974 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fca:	f009 fa09 	bl	800a3e0 <HAL_UARTEx_DisableFifoMode>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 f96c 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2400015c 	.word	0x2400015c
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_DMA_Init+0x3c>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x3c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x3c>)
 800100c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	200b      	movs	r0, #11
 800101e:	f000 fd8c 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001022:	200b      	movs	r0, #11
 8001024:	f000 fda3 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b92      	ldr	r3, [pc, #584]	; (8001294 <MX_GPIO_Init+0x260>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a90      	ldr	r2, [pc, #576]	; (8001294 <MX_GPIO_Init+0x260>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b8e      	ldr	r3, [pc, #568]	; (8001294 <MX_GPIO_Init+0x260>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001068:	4b8a      	ldr	r3, [pc, #552]	; (8001294 <MX_GPIO_Init+0x260>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a89      	ldr	r2, [pc, #548]	; (8001294 <MX_GPIO_Init+0x260>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b86      	ldr	r3, [pc, #536]	; (8001294 <MX_GPIO_Init+0x260>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b83      	ldr	r3, [pc, #524]	; (8001294 <MX_GPIO_Init+0x260>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a81      	ldr	r2, [pc, #516]	; (8001294 <MX_GPIO_Init+0x260>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <MX_GPIO_Init+0x260>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a4:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <MX_GPIO_Init+0x260>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a7a      	ldr	r2, [pc, #488]	; (8001294 <MX_GPIO_Init+0x260>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b77      	ldr	r3, [pc, #476]	; (8001294 <MX_GPIO_Init+0x260>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b74      	ldr	r3, [pc, #464]	; (8001294 <MX_GPIO_Init+0x260>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	4a72      	ldr	r2, [pc, #456]	; (8001294 <MX_GPIO_Init+0x260>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <MX_GPIO_Init+0x260>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <MX_GPIO_Init+0x260>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a6b      	ldr	r2, [pc, #428]	; (8001294 <MX_GPIO_Init+0x260>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <MX_GPIO_Init+0x260>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fe:	4b65      	ldr	r3, [pc, #404]	; (8001294 <MX_GPIO_Init+0x260>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a63      	ldr	r2, [pc, #396]	; (8001294 <MX_GPIO_Init+0x260>)
 8001106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b61      	ldr	r3, [pc, #388]	; (8001294 <MX_GPIO_Init+0x260>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	485d      	ldr	r0, [pc, #372]	; (8001298 <MX_GPIO_Init+0x264>)
 8001124:	f003 fd20 	bl	8004b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112e:	485b      	ldr	r0, [pc, #364]	; (800129c <MX_GPIO_Init+0x268>)
 8001130:	f003 fd1a 	bl	8004b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	4859      	ldr	r0, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x26c>)
 800113a:	f003 fd15 	bl	8004b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4854      	ldr	r0, [pc, #336]	; (80012a4 <MX_GPIO_Init+0x270>)
 8001154:	f003 fb60 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001158:	2332      	movs	r3, #50	; 0x32
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	484c      	ldr	r0, [pc, #304]	; (80012a4 <MX_GPIO_Init+0x270>)
 8001174:	f003 fb50 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001188:	230b      	movs	r3, #11
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4845      	ldr	r0, [pc, #276]	; (80012a8 <MX_GPIO_Init+0x274>)
 8001194:	f003 fb40 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4838      	ldr	r0, [pc, #224]	; (8001298 <MX_GPIO_Init+0x264>)
 80011b6:	f003 fb2f 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80011ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4831      	ldr	r0, [pc, #196]	; (8001298 <MX_GPIO_Init+0x264>)
 80011d4:	f003 fb20 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80011d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <MX_GPIO_Init+0x268>)
 80011f2:	f003 fb11 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4828      	ldr	r0, [pc, #160]	; (80012ac <MX_GPIO_Init+0x278>)
 800120c:	f003 fb04 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MX_GPIO_Init+0x274>)
 8001226:	f003 faf7 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800123c:	230a      	movs	r3, #10
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_GPIO_Init+0x274>)
 8001248:	f003 fae6 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800124c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125e:	230b      	movs	r3, #11
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_GPIO_Init+0x278>)
 800126a:	f003 fad5 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_GPIO_Init+0x26c>)
 8001286:	f003 fac7 	bl	8004818 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	58024400 	.word	0x58024400
 8001298:	58020400 	.word	0x58020400
 800129c:	58020c00 	.word	0x58020c00
 80012a0:	58021000 	.word	0x58021000
 80012a4:	58020800 	.word	0x58020800
 80012a8:	58020000 	.word	0x58020000
 80012ac:	58021800 	.word	0x58021800

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x30>)
 80012c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x30>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x30>)
 80012d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58024400 	.word	0x58024400

080012f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_TIM_PWM_MspInit+0x68>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10f      	bne.n	8001322 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 8001304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 8001314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001320:	e013      	b.n	800134a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132a:	d10e      	bne.n	800134a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 800132e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_TIM_PWM_MspInit+0x6c>)
 800133e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40010000 	.word	0x40010000
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_TIM_MspPostInit+0xb4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d120      	bne.n	80013c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80013a0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <HAL_TIM_MspPostInit+0xbc>)
 80013be:	f003 fa2b 	bl	8004818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013c2:	e023      	b.n	800140c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013cc:	d11e      	bne.n	800140c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_TIM_MspPostInit+0xb8>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013fc:	2301      	movs	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <HAL_TIM_MspPostInit+0xc0>)
 8001408:	f003 fa06 	bl	8004818 <HAL_GPIO_Init>
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010000 	.word	0x40010000
 8001418:	58024400 	.word	0x58024400
 800141c:	58021000 	.word	0x58021000
 8001420:	58020000 	.word	0x58020000

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0bc      	sub	sp, #240	; 0xf0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	22b8      	movs	r2, #184	; 0xb8
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f009 f8f3 	bl	800a630 <memset>
  if(huart->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7b      	ldr	r2, [pc, #492]	; (800163c <HAL_UART_MspInit+0x218>)
 8001450:	4293      	cmp	r3, r2
 8001452:	f040 80a2 	bne.w	800159a <HAL_UART_MspInit+0x176>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001456:	f04f 0202 	mov.w	r2, #2
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fb4f 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001478:	f7ff ff1a 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_UART_MspInit+0x21c>)
 800147e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001482:	4a6f      	ldr	r2, [pc, #444]	; (8001640 <HAL_UART_MspInit+0x21c>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148c:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <HAL_UART_MspInit+0x21c>)
 800148e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <HAL_UART_MspInit+0x21c>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a67      	ldr	r2, [pc, #412]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b61      	ldr	r3, [pc, #388]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	4a60      	ldr	r2, [pc, #384]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c8:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d6:	2308      	movs	r3, #8
 80014d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ee:	2307      	movs	r3, #7
 80014f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f8:	4619      	mov	r1, r3
 80014fa:	4852      	ldr	r0, [pc, #328]	; (8001644 <HAL_UART_MspInit+0x220>)
 80014fc:	f003 f98c 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001500:	2320      	movs	r3, #32
 8001502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001522:	4619      	mov	r1, r3
 8001524:	4848      	ldr	r0, [pc, #288]	; (8001648 <HAL_UART_MspInit+0x224>)
 8001526:	f003 f977 	bl	8004818 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 800152a:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_UART_MspInit+0x228>)
 800152c:	4a48      	ldr	r2, [pc, #288]	; (8001650 <HAL_UART_MspInit+0x22c>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001530:	4b46      	ldr	r3, [pc, #280]	; (800164c <HAL_UART_MspInit+0x228>)
 8001532:	222b      	movs	r2, #43	; 0x2b
 8001534:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_UART_MspInit+0x228>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_UART_MspInit+0x228>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_UART_MspInit+0x228>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_UART_MspInit+0x228>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_UART_MspInit+0x228>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_UART_MspInit+0x228>)
 8001558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_UART_MspInit+0x228>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_UART_MspInit+0x228>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <HAL_UART_MspInit+0x228>)
 800156c:	f000 fb1a 	bl	8001ba4 <HAL_DMA_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001576:	f7ff fe9b 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a33      	ldr	r2, [pc, #204]	; (800164c <HAL_UART_MspInit+0x228>)
 800157e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001582:	4a32      	ldr	r2, [pc, #200]	; (800164c <HAL_UART_MspInit+0x228>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2026      	movs	r0, #38	; 0x26
 800158e:	f000 fad4 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001592:	2026      	movs	r0, #38	; 0x26
 8001594:	f000 faeb 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001598:	e04b      	b.n	8001632 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <HAL_UART_MspInit+0x230>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d146      	bne.n	8001632 <HAL_UART_MspInit+0x20e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a4:	f04f 0202 	mov.w	r2, #2
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 faa8 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80015c6:	f7ff fe73 	bl	80012b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_UART_MspInit+0x21c>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800162a:	4619      	mov	r1, r3
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_UART_MspInit+0x224>)
 800162e:	f003 f8f3 	bl	8004818 <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	37f0      	adds	r7, #240	; 0xf0
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40004400 	.word	0x40004400
 8001640:	58024400 	.word	0x58024400
 8001644:	58020000 	.word	0x58020000
 8001648:	58020c00 	.word	0x58020c00
 800164c:	240001f0 	.word	0x240001f0
 8001650:	40020010 	.word	0x40020010
 8001654:	40004800 	.word	0x40004800

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f92a 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Stream0_IRQHandler+0x10>)
 80016b2:	f001 fd9f 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240001f0 	.word	0x240001f0

080016c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART2_IRQHandler+0x10>)
 80016c6:	f006 ffe7 	bl	8008698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	240000c8 	.word	0x240000c8

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <SystemInit+0xd0>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <SystemInit+0xd0>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <SystemInit+0xd4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d807      	bhi.n	8001704 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <SystemInit+0xd4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <SystemInit+0xd4>)
 80016fe:	f043 0307 	orr.w	r3, r3, #7
 8001702:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <SystemInit+0xd8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <SystemInit+0xd8>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <SystemInit+0xd8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemInit+0xd8>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4924      	ldr	r1, [pc, #144]	; (80017ac <SystemInit+0xd8>)
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <SystemInit+0xdc>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <SystemInit+0xd4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <SystemInit+0xd4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 030f 	bic.w	r3, r3, #15
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <SystemInit+0xd4>)
 8001738:	f043 0307 	orr.w	r3, r3, #7
 800173c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <SystemInit+0xd8>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <SystemInit+0xd8>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <SystemInit+0xd8>)
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <SystemInit+0xe0>)
 8001754:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <SystemInit+0xd8>)
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <SystemInit+0xe4>)
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <SystemInit+0xd8>)
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <SystemInit+0xe8>)
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <SystemInit+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <SystemInit+0xd8>)
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <SystemInit+0xe8>)
 800176c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <SystemInit+0xd8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <SystemInit+0xd8>)
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <SystemInit+0xe8>)
 8001778:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <SystemInit+0xd8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <SystemInit+0xd8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <SystemInit+0xd8>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <SystemInit+0xd8>)
 800178e:	2200      	movs	r2, #0
 8001790:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <SystemInit+0xec>)
 8001794:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001798:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	52002000 	.word	0x52002000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b4:	02020200 	.word	0x02020200
 80017b8:	01ff0000 	.word	0x01ff0000
 80017bc:	01010280 	.word	0x01010280
 80017c0:	52004000 	.word	0x52004000

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c8:	f7ff ff84 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	; (8001810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f008 fef9 	bl	800a5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff f957 	bl	8000aa8 <main>
  bx  lr
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001800:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001804:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001808:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 800180c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001810:	2400040c 	.word	0x2400040c

08001814 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC3_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f980 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001824:	f003 ff9e 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_Init+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <HAL_Init+0x6c>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_Init+0x68>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_Init+0x6c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_Init+0x70>)
 800185a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_Init+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f814 	bl	8001890 <HAL_InitTick>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e002      	b.n	8001878 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fd23 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	58024400 	.word	0x58024400
 8001884:	0800a840 	.word	0x0800a840
 8001888:	24000008 	.word	0x24000008
 800188c:	24000004 	.word	0x24000004

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_InitTick+0x60>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e021      	b.n	80018e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_InitTick+0x64>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_InitTick+0x60>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f965 	bl	8001b8a <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d8:	f000 f92f 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_InitTick+0x68>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	24000010 	.word	0x24000010
 80018f4:	24000004 	.word	0x24000004
 80018f8:	2400000c 	.word	0x2400000c

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	24000010 	.word	0x24000010
 8001920:	24000408 	.word	0x24000408

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	24000408 	.word	0x24000408

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffde 	bl	8001924 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24000010 	.word	0x24000010

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	05fa0000 	.word	0x05fa0000

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff40 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff90 	bl	8001a78 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5f 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff33 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa4 	bl	8001ae0 <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff feba 	bl	8001924 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e314      	b.n	80021e6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a66      	ldr	r2, [pc, #408]	; (8001d5c <HAL_DMA_Init+0x1b8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d04a      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_DMA_Init+0x1bc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d045      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a63      	ldr	r2, [pc, #396]	; (8001d64 <HAL_DMA_Init+0x1c0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d040      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a62      	ldr	r2, [pc, #392]	; (8001d68 <HAL_DMA_Init+0x1c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d03b      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <HAL_DMA_Init+0x1c8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d036      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <HAL_DMA_Init+0x1cc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d031      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <HAL_DMA_Init+0x1d0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02c      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <HAL_DMA_Init+0x1d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d027      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5a      	ldr	r2, [pc, #360]	; (8001d7c <HAL_DMA_Init+0x1d8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d022      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a59      	ldr	r2, [pc, #356]	; (8001d80 <HAL_DMA_Init+0x1dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d01d      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_DMA_Init+0x1e0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_DMA_Init+0x1e4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a54      	ldr	r2, [pc, #336]	; (8001d8c <HAL_DMA_Init+0x1e8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <HAL_DMA_Init+0x1ec>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_DMA_Init+0x1f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_Init+0xb8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_DMA_Init+0x1f4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0xbc>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_DMA_Init+0xbe>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 813c 	beq.w	8001ee0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <HAL_DMA_Init+0x1b8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d04a      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a36      	ldr	r2, [pc, #216]	; (8001d60 <HAL_DMA_Init+0x1bc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d045      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_DMA_Init+0x1c0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d040      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <HAL_DMA_Init+0x1c4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d03b      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <HAL_DMA_Init+0x1c8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d036      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_DMA_Init+0x1cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d031      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_DMA_Init+0x1d0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02c      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_DMA_Init+0x1d4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d027      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_DMA_Init+0x1d8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <HAL_DMA_Init+0x1dc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d01d      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_DMA_Init+0x1e0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_DMA_Init+0x1e4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_DMA_Init+0x1e8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_DMA_Init+0x1ec>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_DMA_Init+0x1f0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_DMA_Init+0x174>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_DMA_Init+0x1f4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <HAL_DMA_Init+0x186>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e007      	b.n	8001d3a <HAL_DMA_Init+0x196>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d3a:	e02f      	b.n	8001d9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3c:	f7ff fdf2 	bl	8001924 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d928      	bls.n	8001d9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e244      	b.n	80021e6 <HAL_DMA_Init+0x642>
 8001d5c:	40020010 	.word	0x40020010
 8001d60:	40020028 	.word	0x40020028
 8001d64:	40020040 	.word	0x40020040
 8001d68:	40020058 	.word	0x40020058
 8001d6c:	40020070 	.word	0x40020070
 8001d70:	40020088 	.word	0x40020088
 8001d74:	400200a0 	.word	0x400200a0
 8001d78:	400200b8 	.word	0x400200b8
 8001d7c:	40020410 	.word	0x40020410
 8001d80:	40020428 	.word	0x40020428
 8001d84:	40020440 	.word	0x40020440
 8001d88:	40020458 	.word	0x40020458
 8001d8c:	40020470 	.word	0x40020470
 8001d90:	40020488 	.word	0x40020488
 8001d94:	400204a0 	.word	0x400204a0
 8001d98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1c8      	bne.n	8001d3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4b84      	ldr	r3, [pc, #528]	; (8001fc8 <HAL_DMA_Init+0x424>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b28      	cmp	r3, #40	; 0x28
 8001e06:	d903      	bls.n	8001e10 <HAL_DMA_Init+0x26c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e0e:	d91f      	bls.n	8001e50 <HAL_DMA_Init+0x2ac>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b3e      	cmp	r3, #62	; 0x3e
 8001e16:	d903      	bls.n	8001e20 <HAL_DMA_Init+0x27c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b42      	cmp	r3, #66	; 0x42
 8001e1e:	d917      	bls.n	8001e50 <HAL_DMA_Init+0x2ac>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b46      	cmp	r3, #70	; 0x46
 8001e26:	d903      	bls.n	8001e30 <HAL_DMA_Init+0x28c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b48      	cmp	r3, #72	; 0x48
 8001e2e:	d90f      	bls.n	8001e50 <HAL_DMA_Init+0x2ac>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b4e      	cmp	r3, #78	; 0x4e
 8001e36:	d903      	bls.n	8001e40 <HAL_DMA_Init+0x29c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b52      	cmp	r3, #82	; 0x52
 8001e3e:	d907      	bls.n	8001e50 <HAL_DMA_Init+0x2ac>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b73      	cmp	r3, #115	; 0x73
 8001e46:	d905      	bls.n	8001e54 <HAL_DMA_Init+0x2b0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b77      	cmp	r3, #119	; 0x77
 8001e4e:	d801      	bhi.n	8001e54 <HAL_DMA_Init+0x2b0>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_DMA_Init+0x2b2>
 8001e54:	2300      	movs	r3, #0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e60:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f023 0307 	bic.w	r3, r3, #7
 8001e78:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d117      	bne.n	8001ebc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f002 fb30 	bl	8004504 <DMA_CheckFifoParam>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e194      	b.n	80021e6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f002 fa6b 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	e0ca      	b.n	8002076 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_DMA_Init+0x428>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a38      	ldr	r2, [pc, #224]	; (8001fd0 <HAL_DMA_Init+0x42c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01d      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <HAL_DMA_Init+0x430>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <HAL_DMA_Init+0x434>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_DMA_Init+0x438>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <HAL_DMA_Init+0x43c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <HAL_DMA_Init+0x440>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Init+0x38c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <HAL_DMA_Init+0x444>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Init+0x390>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_DMA_Init+0x392>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8094 	beq.w	8002064 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <HAL_DMA_Init+0x428>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d021      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <HAL_DMA_Init+0x42c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01c      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_DMA_Init+0x430>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d017      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_DMA_Init+0x434>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_DMA_Init+0x438>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_DMA_Init+0x43c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_DMA_Init+0x440>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d003      	beq.n	8001f8a <HAL_DMA_Init+0x3e6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_DMA_Init+0x444>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_DMA_Init+0x448>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_Init+0x44c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d102      	bne.n	8001fc2 <HAL_DMA_Init+0x41e>
 8001fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc0:	e017      	b.n	8001ff2 <HAL_DMA_Init+0x44e>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e015      	b.n	8001ff2 <HAL_DMA_Init+0x44e>
 8001fc6:	bf00      	nop
 8001fc8:	fe10803f 	.word	0xfe10803f
 8001fcc:	58025408 	.word	0x58025408
 8001fd0:	5802541c 	.word	0x5802541c
 8001fd4:	58025430 	.word	0x58025430
 8001fd8:	58025444 	.word	0x58025444
 8001fdc:	58025458 	.word	0x58025458
 8001fe0:	5802546c 	.word	0x5802546c
 8001fe4:	58025480 	.word	0x58025480
 8001fe8:	58025494 	.word	0x58025494
 8001fec:	fffe000f 	.word	0xfffe000f
 8001ff0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002020:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_DMA_Init+0x64c>)
 8002038:	4413      	add	r3, r2
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_DMA_Init+0x650>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f9a9 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 800204e:	4603      	mov	r3, r0
 8002050:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e008      	b.n	8002076 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0b7      	b.n	80021e6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5f      	ldr	r2, [pc, #380]	; (80021f8 <HAL_DMA_Init+0x654>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d072      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_DMA_Init+0x658>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d06d      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5c      	ldr	r2, [pc, #368]	; (8002200 <HAL_DMA_Init+0x65c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d068      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5a      	ldr	r2, [pc, #360]	; (8002204 <HAL_DMA_Init+0x660>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d063      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_DMA_Init+0x664>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_DMA_Init+0x668>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d059      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_DMA_Init+0x66c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d054      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_DMA_Init+0x670>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04f      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	; (8002218 <HAL_DMA_Init+0x674>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_DMA_Init+0x678>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_DMA_Init+0x67c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_DMA_Init+0x680>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_DMA_Init+0x684>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_DMA_Init+0x688>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_DMA_Init+0x68c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <HAL_DMA_Init+0x690>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_DMA_Init+0x694>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a45      	ldr	r2, [pc, #276]	; (800223c <HAL_DMA_Init+0x698>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a44      	ldr	r2, [pc, #272]	; (8002240 <HAL_DMA_Init+0x69c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_DMA_Init+0x6a0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <HAL_DMA_Init+0x6a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3f      	ldr	r2, [pc, #252]	; (800224c <HAL_DMA_Init+0x6a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_DMA_Init+0x6ac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Init+0x5c2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_DMA_Init+0x6b0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_DMA_Init+0x5c6>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_DMA_Init+0x5c8>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f002 fa43 	bl	80045fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d102      	bne.n	8002184 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002198:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_DMA_Init+0x620>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d80c      	bhi.n	80021c4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 fac0 	bl	8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e008      	b.n	80021d6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	a7fdabf8 	.word	0xa7fdabf8
 80021f4:	cccccccd 	.word	0xcccccccd
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
 8002238:	58025408 	.word	0x58025408
 800223c:	5802541c 	.word	0x5802541c
 8002240:	58025430 	.word	0x58025430
 8002244:	58025444 	.word	0x58025444
 8002248:	58025458 	.word	0x58025458
 800224c:	5802546c 	.word	0x5802546c
 8002250:	58025480 	.word	0x58025480
 8002254:	58025494 	.word	0x58025494

08002258 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e226      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Start_IT+0x2a>
 800227e:	2302      	movs	r3, #2
 8002280:	e21f      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 820a 	bne.w	80026ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a68      	ldr	r2, [pc, #416]	; (800244c <HAL_DMA_Start_IT+0x1f4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_DMA_Start_IT+0x1f8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_DMA_Start_IT+0x1fc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_DMA_Start_IT+0x200>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a62      	ldr	r2, [pc, #392]	; (800245c <HAL_DMA_Start_IT+0x204>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a60      	ldr	r2, [pc, #384]	; (8002460 <HAL_DMA_Start_IT+0x208>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5f      	ldr	r2, [pc, #380]	; (8002464 <HAL_DMA_Start_IT+0x20c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_DMA_Start_IT+0x210>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	; (800246c <HAL_DMA_Start_IT+0x214>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_DMA_Start_IT+0x218>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a59      	ldr	r2, [pc, #356]	; (8002474 <HAL_DMA_Start_IT+0x21c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_DMA_Start_IT+0x220>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_DMA_Start_IT+0x224>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_DMA_Start_IT+0x228>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a53      	ldr	r2, [pc, #332]	; (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_DMA_Start_IT+0x230>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <HAL_DMA_Start_IT+0x100>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e007      	b.n	8002368 <HAL_DMA_Start_IT+0x110>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f001 fe6a 	bl	8004048 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_DMA_Start_IT+0x1f4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_DMA_Start_IT+0x1f8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_DMA_Start_IT+0x1fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	; (8002458 <HAL_DMA_Start_IT+0x200>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_DMA_Start_IT+0x204>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_DMA_Start_IT+0x208>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_DMA_Start_IT+0x20c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_DMA_Start_IT+0x210>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_DMA_Start_IT+0x214>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_DMA_Start_IT+0x218>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_DMA_Start_IT+0x21c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_DMA_Start_IT+0x220>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Start_IT+0x224>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_DMA_Start_IT+0x228>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_DMA_Start_IT+0x230>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Start_IT+0x1c0>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_DMA_Start_IT+0x1c2>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 021e 	bic.w	r2, r3, #30
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0216 	orr.w	r2, r2, #22
 8002430:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03e      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0208 	orr.w	r2, r2, #8
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e035      	b.n	80024b8 <HAL_DMA_Start_IT+0x260>
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020e 	bic.w	r2, r3, #14
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 020a 	orr.w	r2, r2, #10
 800249e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0204 	orr.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_DMA_Start_IT+0x474>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d072      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <HAL_DMA_Start_IT+0x478>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d06d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a80      	ldr	r2, [pc, #512]	; (80026d4 <HAL_DMA_Start_IT+0x47c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d068      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7f      	ldr	r2, [pc, #508]	; (80026d8 <HAL_DMA_Start_IT+0x480>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d063      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7d      	ldr	r2, [pc, #500]	; (80026dc <HAL_DMA_Start_IT+0x484>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d05e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7c      	ldr	r2, [pc, #496]	; (80026e0 <HAL_DMA_Start_IT+0x488>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d059      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7a      	ldr	r2, [pc, #488]	; (80026e4 <HAL_DMA_Start_IT+0x48c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d054      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a79      	ldr	r2, [pc, #484]	; (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d04f      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_DMA_Start_IT+0x494>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a76      	ldr	r2, [pc, #472]	; (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	; (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a70      	ldr	r2, [pc, #448]	; (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_DMA_Start_IT+0x4b4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_DMA_Start_IT+0x4b8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <HAL_DMA_Start_IT+0x4bc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_DMA_Start_IT+0x4c0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_DMA_Start_IT+0x4c4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a64      	ldr	r2, [pc, #400]	; (8002720 <HAL_DMA_Start_IT+0x4c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_DMA_Start_IT+0x4cc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a61      	ldr	r2, [pc, #388]	; (8002728 <HAL_DMA_Start_IT+0x4d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_Start_IT+0x354>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_DMA_Start_IT+0x356>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_DMA_Start_IT+0x474>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_DMA_Start_IT+0x478>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_DMA_Start_IT+0x47c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <HAL_DMA_Start_IT+0x480>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_DMA_Start_IT+0x484>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_DMA_Start_IT+0x488>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <HAL_DMA_Start_IT+0x48c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_DMA_Start_IT+0x494>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <HAL_DMA_Start_IT+0x442>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e012      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e009      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494

0800272c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff f8f6 	bl	8001924 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2dc      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e2cd      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a76      	ldr	r2, [pc, #472]	; (8002940 <HAL_DMA_Abort+0x214>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a74      	ldr	r2, [pc, #464]	; (8002944 <HAL_DMA_Abort+0x218>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	; (8002948 <HAL_DMA_Abort+0x21c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_DMA_Abort+0x220>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a70      	ldr	r2, [pc, #448]	; (8002950 <HAL_DMA_Abort+0x224>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_DMA_Abort+0x228>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <HAL_DMA_Abort+0x22c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_DMA_Abort+0x230>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_DMA_Abort+0x234>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a68      	ldr	r2, [pc, #416]	; (8002964 <HAL_DMA_Abort+0x238>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_DMA_Abort+0x23c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_DMA_Abort+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	; (8002970 <HAL_DMA_Abort+0x244>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_DMA_Abort+0x248>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a61      	ldr	r2, [pc, #388]	; (8002978 <HAL_DMA_Abort+0x24c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_DMA_Abort+0x250>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Abort+0xda>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_DMA_Abort+0xdc>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 021e 	bic.w	r2, r2, #30
 800281a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e00a      	b.n	800284a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 020e 	bic.w	r2, r2, #14
 8002842:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_DMA_Abort+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d072      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_DMA_Abort+0x218>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d06d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_DMA_Abort+0x21c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d068      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_DMA_Abort+0x220>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d063      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a36      	ldr	r2, [pc, #216]	; (8002950 <HAL_DMA_Abort+0x224>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_Abort+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d059      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_DMA_Abort+0x22c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d054      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_Abort+0x230>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04f      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_DMA_Abort+0x234>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_DMA_Abort+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_DMA_Abort+0x23c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_Abort+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_Abort+0x244>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_DMA_Abort+0x248>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Abort+0x24c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_DMA_Abort+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_Abort+0x254>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Abort+0x258>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_Abort+0x25c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_DMA_Abort+0x260>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_Abort+0x264>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_DMA_Abort+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_DMA_Abort+0x26c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_DMA_Abort+0x270>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d132      	bne.n	80029a0 <HAL_DMA_Abort+0x274>
 800293a:	2301      	movs	r3, #1
 800293c:	e031      	b.n	80029a2 <HAL_DMA_Abort+0x276>
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6d      	ldr	r2, [pc, #436]	; (8002b70 <HAL_DMA_Abort+0x444>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_DMA_Abort+0x448>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_DMA_Abort+0x44c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_DMA_Abort+0x450>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_DMA_Abort+0x454>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_DMA_Abort+0x458>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <HAL_DMA_Abort+0x45c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a62      	ldr	r2, [pc, #392]	; (8002b8c <HAL_DMA_Abort+0x460>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_DMA_Abort+0x464>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_DMA_Abort+0x468>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <HAL_DMA_Abort+0x46c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_DMA_Abort+0x470>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_DMA_Abort+0x474>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_DMA_Abort+0x478>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_DMA_Abort+0x480>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Abort+0x33c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_DMA_Abort+0x34c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a78:	e013      	b.n	8002aa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7fe ff53 	bl	8001924 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d90c      	bls.n	8002aa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12d      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_DMA_Abort+0x444>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	; (8002b74 <HAL_DMA_Abort+0x448>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <HAL_DMA_Abort+0x44c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_DMA_Abort+0x450>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_DMA_Abort+0x454>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_DMA_Abort+0x458>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_DMA_Abort+0x45c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <HAL_DMA_Abort+0x460>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_DMA_Abort+0x464>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <HAL_DMA_Abort+0x468>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_DMA_Abort+0x46c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_DMA_Abort+0x470>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_DMA_Abort+0x474>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_DMA_Abort+0x478>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_DMA_Abort+0x480>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Abort+0x426>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_Abort+0x428>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02b      	beq.n	8002bb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	223f      	movs	r2, #63	; 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e02a      	b.n	8002bc6 <HAL_DMA_Abort+0x49a>
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_DMA_Abort+0x5dc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d072      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	; (8002d0c <HAL_DMA_Abort+0x5e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d06d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4c      	ldr	r2, [pc, #304]	; (8002d10 <HAL_DMA_Abort+0x5e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d068      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_DMA_Abort+0x5e8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d063      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_DMA_Abort+0x5ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_DMA_Abort+0x5f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d059      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_DMA_Abort+0x5f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d054      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <HAL_DMA_Abort+0x5f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <HAL_DMA_Abort+0x5fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a41      	ldr	r2, [pc, #260]	; (8002d2c <HAL_DMA_Abort+0x600>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <HAL_DMA_Abort+0x604>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <HAL_DMA_Abort+0x608>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <HAL_DMA_Abort+0x60c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_DMA_Abort+0x610>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_DMA_Abort+0x614>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_DMA_Abort+0x618>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <HAL_DMA_Abort+0x61c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a35      	ldr	r2, [pc, #212]	; (8002d4c <HAL_DMA_Abort+0x620>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <HAL_DMA_Abort+0x624>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_DMA_Abort+0x628>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <HAL_DMA_Abort+0x62c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <HAL_DMA_Abort+0x630>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <HAL_DMA_Abort+0x634>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <HAL_DMA_Abort+0x638>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Abort+0x58e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Abort+0x590>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020010 	.word	0x40020010
 8002d0c:	40020028 	.word	0x40020028
 8002d10:	40020040 	.word	0x40020040
 8002d14:	40020058 	.word	0x40020058
 8002d18:	40020070 	.word	0x40020070
 8002d1c:	40020088 	.word	0x40020088
 8002d20:	400200a0 	.word	0x400200a0
 8002d24:	400200b8 	.word	0x400200b8
 8002d28:	40020410 	.word	0x40020410
 8002d2c:	40020428 	.word	0x40020428
 8002d30:	40020440 	.word	0x40020440
 8002d34:	40020458 	.word	0x40020458
 8002d38:	40020470 	.word	0x40020470
 8002d3c:	40020488 	.word	0x40020488
 8002d40:	400204a0 	.word	0x400204a0
 8002d44:	400204b8 	.word	0x400204b8
 8002d48:	58025408 	.word	0x58025408
 8002d4c:	5802541c 	.word	0x5802541c
 8002d50:	58025430 	.word	0x58025430
 8002d54:	58025444 	.word	0x58025444
 8002d58:	58025458 	.word	0x58025458
 8002d5c:	5802546c 	.word	0x5802546c
 8002d60:	58025480 	.word	0x58025480
 8002d64:	58025494 	.word	0x58025494

08002d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e237      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e22c      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5c      	ldr	r2, [pc, #368]	; (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04a      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d045      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a59      	ldr	r2, [pc, #356]	; (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03b      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d036      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d031      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d027      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Abort_IT+0xcc>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_Abort_IT+0xce>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8086 	beq.w	8002f48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x18e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e178      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e16f      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020e 	bic.w	r2, r2, #14
 8002f56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04a      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d045      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a69      	ldr	r2, [pc, #420]	; (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d040      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a68      	ldr	r2, [pc, #416]	; (800311c <HAL_DMA_Abort_IT+0x3b4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d03b      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a66      	ldr	r2, [pc, #408]	; (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d036      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d031      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a62      	ldr	r2, [pc, #392]	; (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d027      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a60      	ldr	r2, [pc, #384]	; (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5f      	ldr	r2, [pc, #380]	; (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01d      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_DMA_Abort_IT+0x3d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_DMA_Abort_IT+0x3e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <HAL_DMA_Abort_IT+0x2a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_DMA_Abort_IT+0x2b2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d072      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d06d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d068      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_DMA_Abort_IT+0x3b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d063      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a36      	ldr	r2, [pc, #216]	; (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d05e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d059      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d054      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04f      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_DMA_Abort_IT+0x3d4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_DMA_Abort_IT+0x3e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_DMA_Abort_IT+0x3e8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_DMA_Abort_IT+0x3ec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DMA_Abort_IT+0x3f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_DMA_Abort_IT+0x3f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_DMA_Abort_IT+0x3f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_DMA_Abort_IT+0x3fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_DMA_Abort_IT+0x400>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_DMA_Abort_IT+0x404>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d132      	bne.n	8003170 <HAL_DMA_Abort_IT+0x408>
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_DMA_Abort_IT+0x40a>
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d028      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003200:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_DMA_IRQHandler+0x1ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <HAL_DMA_IRQHandler+0x1b0>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04a      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5d      	ldr	r2, [pc, #372]	; (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d045      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d040      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03b      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a59      	ldr	r2, [pc, #356]	; (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d036      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d02c      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d027      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a53      	ldr	r2, [pc, #332]	; (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	; (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_IRQHandler+0xd6>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_DMA_IRQHandler+0xd8>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 842b 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2208      	movs	r2, #8
 80032dc:	409a      	lsls	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a2 	beq.w	800342c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d045      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d040      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03b      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d036      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d031      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d027      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01d      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12f      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x1f4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e02e      	b.n	80033fc <HAL_DMA_IRQHandler+0x208>
 800339e:	bf00      	nop
 80033a0:	24000004 	.word	0x24000004
 80033a4:	1b4e81b5 	.word	0x1b4e81b5
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a69      	ldr	r2, [pc, #420]	; (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a67      	ldr	r2, [pc, #412]	; (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a66      	ldr	r2, [pc, #408]	; (80035f4 <HAL_DMA_IRQHandler+0x400>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a64      	ldr	r2, [pc, #400]	; (80035f8 <HAL_DMA_IRQHandler+0x404>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a61      	ldr	r2, [pc, #388]	; (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <HAL_DMA_IRQHandler+0x414>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5d      	ldr	r2, [pc, #372]	; (800360c <HAL_DMA_IRQHandler+0x418>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_DMA_IRQHandler+0x41c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <HAL_DMA_IRQHandler+0x420>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_DMA_IRQHandler+0x424>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a57      	ldr	r2, [pc, #348]	; (800361c <HAL_DMA_IRQHandler+0x428>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_DMA_IRQHandler+0x430>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_DMA_IRQHandler+0x434>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10a      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x304>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e003      	b.n	8003500 <HAL_DMA_IRQHandler+0x30c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0202 	orr.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2204      	movs	r2, #4
 800352a:	409a      	lsls	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 808f 	beq.w	8003654 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_DMA_IRQHandler+0x400>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_DMA_IRQHandler+0x404>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_DMA_IRQHandler+0x414>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_DMA_IRQHandler+0x418>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_DMA_IRQHandler+0x41c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_DMA_IRQHandler+0x420>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_DMA_IRQHandler+0x424>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_DMA_IRQHandler+0x428>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_DMA_IRQHandler+0x430>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_DMA_IRQHandler+0x434>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12a      	bne.n	800362c <HAL_DMA_IRQHandler+0x438>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e023      	b.n	8003634 <HAL_DMA_IRQHandler+0x440>
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a85      	ldr	r2, [pc, #532]	; (8003884 <HAL_DMA_IRQHandler+0x690>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a83      	ldr	r2, [pc, #524]	; (8003888 <HAL_DMA_IRQHandler+0x694>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a82      	ldr	r2, [pc, #520]	; (800388c <HAL_DMA_IRQHandler+0x698>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_DMA_IRQHandler+0x69c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7f      	ldr	r2, [pc, #508]	; (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7c      	ldr	r2, [pc, #496]	; (800389c <HAL_DMA_IRQHandler+0x6a8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a79      	ldr	r2, [pc, #484]	; (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	; (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a76      	ldr	r2, [pc, #472]	; (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	; (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	; (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a71      	ldr	r2, [pc, #452]	; (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a70      	ldr	r2, [pc, #448]	; (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	; (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10a      	bne.n	8003720 <HAL_DMA_IRQHandler+0x52c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e009      	b.n	8003734 <HAL_DMA_IRQHandler+0x540>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03e      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d024      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e01f      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
 8003786:	e016      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8110 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <HAL_DMA_IRQHandler+0x690>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_DMA_IRQHandler+0x694>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d045      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a29      	ldr	r2, [pc, #164]	; (800388c <HAL_DMA_IRQHandler+0x698>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d040      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_DMA_IRQHandler+0x69c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d03b      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d036      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d031      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_DMA_IRQHandler+0x6a8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02c      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d027      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d12b      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x6d0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e02a      	b.n	80038d8 <HAL_DMA_IRQHandler+0x6e4>
 8003882:	bf00      	nop
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2220      	movs	r2, #32
 80038e8:	409a      	lsls	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d139      	bne.n	800396e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0216 	bic.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003918:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_DMA_IRQHandler+0x736>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	223f      	movs	r2, #63	; 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 834a 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
          }
          return;
 800396c:	e344      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e027      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d023      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e01e      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0210 	bic.w	r2, r2, #16
 80039ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8306 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8088 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7a      	ldr	r2, [pc, #488]	; (8003bfc <HAL_DMA_IRQHandler+0xa08>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a79      	ldr	r2, [pc, #484]	; (8003c00 <HAL_DMA_IRQHandler+0xa0c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a77      	ldr	r2, [pc, #476]	; (8003c04 <HAL_DMA_IRQHandler+0xa10>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a76      	ldr	r2, [pc, #472]	; (8003c08 <HAL_DMA_IRQHandler+0xa14>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <HAL_DMA_IRQHandler+0xa18>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	; (8003c10 <HAL_DMA_IRQHandler+0xa1c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_DMA_IRQHandler+0xa20>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a70      	ldr	r2, [pc, #448]	; (8003c18 <HAL_DMA_IRQHandler+0xa24>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_DMA_IRQHandler+0xa28>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	; (8003c20 <HAL_DMA_IRQHandler+0xa2c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6b      	ldr	r2, [pc, #428]	; (8003c24 <HAL_DMA_IRQHandler+0xa30>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_DMA_IRQHandler+0xa34>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	; (8003c2c <HAL_DMA_IRQHandler+0xa38>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a67      	ldr	r2, [pc, #412]	; (8003c30 <HAL_DMA_IRQHandler+0xa3c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_DMA_IRQHandler+0xa40>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a64      	ldr	r2, [pc, #400]	; (8003c38 <HAL_DMA_IRQHandler+0xa44>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <HAL_DMA_IRQHandler+0x8ca>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e007      	b.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d307      	bcc.n	8003aea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f2      	bne.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003aea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b02:	e003      	b.n	8003b0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8272 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e26c      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a43      	ldr	r2, [pc, #268]	; (8003c3c <HAL_DMA_IRQHandler+0xa48>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <HAL_DMA_IRQHandler+0xa4c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a40      	ldr	r2, [pc, #256]	; (8003c44 <HAL_DMA_IRQHandler+0xa50>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <HAL_DMA_IRQHandler+0xa54>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <HAL_DMA_IRQHandler+0xa58>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <HAL_DMA_IRQHandler+0xa5c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <HAL_DMA_IRQHandler+0xa60>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_DMA_IRQHandler+0xa64>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x988>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_IRQHandler+0x98a>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 823f 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2204      	movs	r2, #4
 8003b96:	409a      	lsls	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80cd 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80c7 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d049      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8210 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be4:	e20a      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8206 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf8:	e200      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
 8003bfa:	bf00      	nop
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
 8003c3c:	58025408 	.word	0x58025408
 8003c40:	5802541c 	.word	0x5802541c
 8003c44:	58025430 	.word	0x58025430
 8003c48:	58025444 	.word	0x58025444
 8003c4c:	58025458 	.word	0x58025458
 8003c50:	5802546c 	.word	0x5802546c
 8003c54:	58025480 	.word	0x58025480
 8003c58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d160      	bne.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7f      	ldr	r2, [pc, #508]	; (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7d      	ldr	r2, [pc, #500]	; (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	; (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7a      	ldr	r2, [pc, #488]	; (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a79      	ldr	r2, [pc, #484]	; (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	; (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	; (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	; (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_DMA_IRQHandler+0xb24>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e007      	b.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8165 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3a:	e15f      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2202      	movs	r2, #2
 8003d46:	409a      	lsls	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c5 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bf 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2202      	movs	r2, #2
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 813a 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d94:	e134      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8130 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	e12a      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8089 	bne.w	8003ec8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d128      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0xcb4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0214 	bic.w	r2, r2, #20
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e027      	b.n	8003eb8 <HAL_DMA_IRQHandler+0xcc4>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 020a 	bic.w	r2, r2, #10
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8097 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eda:	e091      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8088 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8082 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	; (8004008 <HAL_DMA_IRQHandler+0xe14>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	; (800400c <HAL_DMA_IRQHandler+0xe18>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <HAL_DMA_IRQHandler+0xe1c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <HAL_DMA_IRQHandler+0xe20>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <HAL_DMA_IRQHandler+0xe24>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_DMA_IRQHandler+0xe28>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_DMA_IRQHandler+0xe2c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a36      	ldr	r2, [pc, #216]	; (8004024 <HAL_DMA_IRQHandler+0xe30>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_DMA_IRQHandler+0xe34>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <HAL_DMA_IRQHandler+0xe38>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_DMA_IRQHandler+0xe3c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_DMA_IRQHandler+0xe40>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_DMA_IRQHandler+0xe44>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_DMA_IRQHandler+0xe48>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <HAL_DMA_IRQHandler+0xe4c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_DMA_IRQHandler+0xe50>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0xdbc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 021c 	bic.w	r2, r2, #28
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e007      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xdcc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020e 	bic.w	r2, r2, #14
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e004      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004000:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020010 	.word	0x40020010
 800400c:	40020028 	.word	0x40020028
 8004010:	40020040 	.word	0x40020040
 8004014:	40020058 	.word	0x40020058
 8004018:	40020070 	.word	0x40020070
 800401c:	40020088 	.word	0x40020088
 8004020:	400200a0 	.word	0x400200a0
 8004024:	400200b8 	.word	0x400200b8
 8004028:	40020410 	.word	0x40020410
 800402c:	40020428 	.word	0x40020428
 8004030:	40020440 	.word	0x40020440
 8004034:	40020458 	.word	0x40020458
 8004038:	40020470 	.word	0x40020470
 800403c:	40020488 	.word	0x40020488
 8004040:	400204a0 	.word	0x400204a0
 8004044:	400204b8 	.word	0x400204b8

08004048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <DMA_SetConfig+0x21c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d072      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7d      	ldr	r2, [pc, #500]	; (8004268 <DMA_SetConfig+0x220>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d06d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <DMA_SetConfig+0x224>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d068      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7a      	ldr	r2, [pc, #488]	; (8004270 <DMA_SetConfig+0x228>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d063      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a79      	ldr	r2, [pc, #484]	; (8004274 <DMA_SetConfig+0x22c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d05e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a77      	ldr	r2, [pc, #476]	; (8004278 <DMA_SetConfig+0x230>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d059      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a76      	ldr	r2, [pc, #472]	; (800427c <DMA_SetConfig+0x234>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d054      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a74      	ldr	r2, [pc, #464]	; (8004280 <DMA_SetConfig+0x238>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04f      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a73      	ldr	r2, [pc, #460]	; (8004284 <DMA_SetConfig+0x23c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a71      	ldr	r2, [pc, #452]	; (8004288 <DMA_SetConfig+0x240>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a70      	ldr	r2, [pc, #448]	; (800428c <DMA_SetConfig+0x244>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	; (8004290 <DMA_SetConfig+0x248>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6d      	ldr	r2, [pc, #436]	; (8004294 <DMA_SetConfig+0x24c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <DMA_SetConfig+0x250>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6a      	ldr	r2, [pc, #424]	; (800429c <DMA_SetConfig+0x254>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	; (80042a0 <DMA_SetConfig+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <DMA_SetConfig+0x25c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <DMA_SetConfig+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <DMA_SetConfig+0x264>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a62      	ldr	r2, [pc, #392]	; (80042b0 <DMA_SetConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <DMA_SetConfig+0x26c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5f      	ldr	r2, [pc, #380]	; (80042b8 <DMA_SetConfig+0x270>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <DMA_SetConfig+0x274>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <DMA_SetConfig+0x278>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <DMA_SetConfig+0x10e>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <DMA_SetConfig+0x110>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004164:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004176:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <DMA_SetConfig+0x21c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <DMA_SetConfig+0x220>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	; (800426c <DMA_SetConfig+0x224>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <DMA_SetConfig+0x228>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <DMA_SetConfig+0x22c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <DMA_SetConfig+0x230>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <DMA_SetConfig+0x234>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <DMA_SetConfig+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <DMA_SetConfig+0x23c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <DMA_SetConfig+0x240>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <DMA_SetConfig+0x244>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <DMA_SetConfig+0x248>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <DMA_SetConfig+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a26      	ldr	r2, [pc, #152]	; (8004298 <DMA_SetConfig+0x250>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <DMA_SetConfig+0x254>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <DMA_SetConfig+0x258>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <DMA_SetConfig+0x1d4>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <DMA_SetConfig+0x1d6>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d059      	beq.n	80042d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	223f      	movs	r2, #63	; 0x3f
 800422c:	409a      	lsls	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004240:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d138      	bne.n	80042c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004262:	e086      	b.n	8004372 <DMA_SetConfig+0x32a>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	e04d      	b.n	8004372 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <DMA_SetConfig+0x338>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <DMA_SetConfig+0x33c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <DMA_SetConfig+0x340>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <DMA_SetConfig+0x344>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <DMA_SetConfig+0x348>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a21      	ldr	r2, [pc, #132]	; (8004394 <DMA_SetConfig+0x34c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a20      	ldr	r2, [pc, #128]	; (8004398 <DMA_SetConfig+0x350>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <DMA_SetConfig+0x2de>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1e      	ldr	r2, [pc, #120]	; (800439c <DMA_SetConfig+0x354>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <DMA_SetConfig+0x2e2>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <DMA_SetConfig+0x2e4>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d108      	bne.n	8004362 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	e007      	b.n	8004372 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58025408 	.word	0x58025408
 8004384:	5802541c 	.word	0x5802541c
 8004388:	58025430 	.word	0x58025430
 800438c:	58025444 	.word	0x58025444
 8004390:	58025458 	.word	0x58025458
 8004394:	5802546c 	.word	0x5802546c
 8004398:	58025480 	.word	0x58025480
 800439c:	58025494 	.word	0x58025494

080043a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a42      	ldr	r2, [pc, #264]	; (80044b8 <DMA_CalcBaseAndBitshift+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a41      	ldr	r2, [pc, #260]	; (80044bc <DMA_CalcBaseAndBitshift+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <DMA_CalcBaseAndBitshift+0x120>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <DMA_CalcBaseAndBitshift+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <DMA_CalcBaseAndBitshift+0x128>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3b      	ldr	r2, [pc, #236]	; (80044cc <DMA_CalcBaseAndBitshift+0x12c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a39      	ldr	r2, [pc, #228]	; (80044d0 <DMA_CalcBaseAndBitshift+0x130>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <DMA_CalcBaseAndBitshift+0x134>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <DMA_CalcBaseAndBitshift+0x138>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a35      	ldr	r2, [pc, #212]	; (80044dc <DMA_CalcBaseAndBitshift+0x13c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <DMA_CalcBaseAndBitshift+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <DMA_CalcBaseAndBitshift+0x144>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <DMA_CalcBaseAndBitshift+0x148>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <DMA_CalcBaseAndBitshift+0x14c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <DMA_CalcBaseAndBitshift+0x150>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <DMA_CalcBaseAndBitshift+0x154>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_CalcBaseAndBitshift+0xac>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_CalcBaseAndBitshift+0xae>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d024      	beq.n	800449c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b10      	subs	r3, #16
 800445a:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <DMA_CalcBaseAndBitshift+0x158>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <DMA_CalcBaseAndBitshift+0x15c>)
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d908      	bls.n	800448c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004482:	4013      	ands	r3, r2
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	659a      	str	r2, [r3, #88]	; 0x58
 800448a:	e00d      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6593      	str	r3, [r2, #88]	; 0x58
 800449a:	e005      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	aaaaaaab 	.word	0xaaaaaaab
 80044fc:	0800a850 	.word	0x0800a850
 8004500:	fffffc00 	.word	0xfffffc00

08004504 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d120      	bne.n	800455a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	2b03      	cmp	r3, #3
 800451e:	d858      	bhi.n	80045d2 <DMA_CheckFifoParam+0xce>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <DMA_CheckFifoParam+0x24>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	0800454b 	.word	0x0800454b
 8004530:	08004539 	.word	0x08004539
 8004534:	080045d3 	.word	0x080045d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d048      	beq.n	80045d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004548:	e045      	b.n	80045d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004552:	d142      	bne.n	80045da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004558:	e03f      	b.n	80045da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	d123      	bne.n	80045ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	2b03      	cmp	r3, #3
 800456a:	d838      	bhi.n	80045de <DMA_CheckFifoParam+0xda>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <DMA_CheckFifoParam+0x70>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	0800458b 	.word	0x0800458b
 800457c:	08004585 	.word	0x08004585
 8004580:	0800459d 	.word	0x0800459d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        break;
 8004588:	e030      	b.n	80045ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d025      	beq.n	80045e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800459a:	e022      	b.n	80045e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045a4:	d11f      	bne.n	80045e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045aa:	e01c      	b.n	80045e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d902      	bls.n	80045ba <DMA_CheckFifoParam+0xb6>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d003      	beq.n	80045c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045b8:	e018      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
        break;
 80045be:	e015      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
    break;
 80045d0:	e00b      	b.n	80045ea <DMA_CheckFifoParam+0xe6>
        break;
 80045d2:	bf00      	nop
 80045d4:	e00a      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045d6:	bf00      	nop
 80045d8:	e008      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045da:	bf00      	nop
 80045dc:	e006      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045de:	bf00      	nop
 80045e0:	e004      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
    break;
 80045ea:	bf00      	nop
    }
  }

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a36      	ldr	r2, [pc, #216]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a33      	ldr	r2, [pc, #204]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a32      	ldr	r2, [pc, #200]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2d      	ldr	r2, [pc, #180]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3b08      	subs	r3, #8
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4b26      	ldr	r3, [pc, #152]	; (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004688:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004698:	e024      	b.n	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b10      	subs	r3, #16
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d806      	bhi.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3308      	adds	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a16      	ldr	r2, [pc, #88]	; (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	58025408 	.word	0x58025408
 80046f4:	5802541c 	.word	0x5802541c
 80046f8:	58025430 	.word	0x58025430
 80046fc:	58025444 	.word	0x58025444
 8004700:	58025458 	.word	0x58025458
 8004704:	5802546c 	.word	0x5802546c
 8004708:	58025480 	.word	0x58025480
 800470c:	58025494 	.word	0x58025494
 8004710:	cccccccd 	.word	0xcccccccd
 8004714:	16009600 	.word	0x16009600
 8004718:	58025880 	.word	0x58025880
 800471c:	aaaaaaab 	.word	0xaaaaaaab
 8004720:	400204b8 	.word	0x400204b8
 8004724:	4002040f 	.word	0x4002040f
 8004728:	10008200 	.word	0x10008200
 800472c:	40020880 	.word	0x40020880

08004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04a      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d847      	bhi.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01d      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047b8:	671a      	str	r2, [r3, #112]	; 0x70
 80047ba:	e009      	b.n	80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494
 8004808:	1600963f 	.word	0x1600963f
 800480c:	58025940 	.word	0x58025940
 8004810:	1000823f 	.word	0x1000823f
 8004814:	40020940 	.word	0x40020940

08004818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004826:	4b86      	ldr	r3, [pc, #536]	; (8004a40 <HAL_GPIO_Init+0x228>)
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	e18c      	b.n	8004b46 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 817e 	beq.w	8004b40 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80d8 	beq.w	8004b40 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b2c      	ldr	r3, [pc, #176]	; (8004a44 <HAL_GPIO_Init+0x22c>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004996:	4a2b      	ldr	r2, [pc, #172]	; (8004a44 <HAL_GPIO_Init+0x22c>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_GPIO_Init+0x22c>)
 80049a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a26      	ldr	r2, [pc, #152]	; (8004a48 <HAL_GPIO_Init+0x230>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <HAL_GPIO_Init+0x234>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04a      	beq.n	8004a70 <HAL_GPIO_Init+0x258>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <HAL_GPIO_Init+0x238>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <HAL_GPIO_Init+0x222>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <HAL_GPIO_Init+0x23c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <HAL_GPIO_Init+0x21e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <HAL_GPIO_Init+0x240>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <HAL_GPIO_Init+0x21a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <HAL_GPIO_Init+0x244>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x216>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_GPIO_Init+0x248>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x212>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_GPIO_Init+0x24c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_GPIO_Init+0x250>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x20a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_GPIO_Init+0x254>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x206>
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	e029      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a1e:	230a      	movs	r3, #10
 8004a20:	e027      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e025      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a26:	2306      	movs	r3, #6
 8004a28:	e023      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a2a:	2305      	movs	r3, #5
 8004a2c:	e021      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	e01f      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e01d      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e01b      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e019      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a3e:	bf00      	nop
 8004a40:	58000080 	.word	0x58000080
 8004a44:	58024400 	.word	0x58024400
 8004a48:	58000400 	.word	0x58000400
 8004a4c:	58020000 	.word	0x58020000
 8004a50:	58020400 	.word	0x58020400
 8004a54:	58020800 	.word	0x58020800
 8004a58:	58020c00 	.word	0x58020c00
 8004a5c:	58021000 	.word	0x58021000
 8004a60:	58021400 	.word	0x58021400
 8004a64:	58021800 	.word	0x58021800
 8004a68:	58021c00 	.word	0x58021c00
 8004a6c:	58022400 	.word	0x58022400
 8004a70:	2300      	movs	r3, #0
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	f002 0203 	and.w	r2, r2, #3
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	4093      	lsls	r3, r2
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a82:	4938      	ldr	r1, [pc, #224]	; (8004b64 <HAL_GPIO_Init+0x34c>)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f ae6b 	bne.w	800482c <HAL_GPIO_Init+0x14>
  }
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	3724      	adds	r7, #36	; 0x24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	58000400 	.word	0x58000400

08004b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
 8004b74:	4613      	mov	r3, r2
 8004b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b78:	787b      	ldrb	r3, [r7, #1]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b84:	e003      	b.n	8004b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	041a      	lsls	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bac:	887a      	ldrh	r2, [r7, #2]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	041a      	lsls	r2, r3, #16
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	43d9      	mvns	r1, r3
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	400b      	ands	r3, r1
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	619a      	str	r2, [r3, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_PWREx_ConfigSupply+0x70>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d00a      	beq.n	8004bfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <HAL_PWREx_ConfigSupply+0x70>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e01f      	b.n	8004c36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e01d      	b.n	8004c36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_PWREx_ConfigSupply+0x70>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f023 0207 	bic.w	r2, r3, #7
 8004c02:	490f      	ldr	r1, [pc, #60]	; (8004c40 <HAL_PWREx_ConfigSupply+0x70>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c0a:	f7fc fe8b 	bl	8001924 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c10:	e009      	b.n	8004c26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c12:	f7fc fe87 	bl	8001924 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c20:	d901      	bls.n	8004c26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e007      	b.n	8004c36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_PWREx_ConfigSupply+0x70>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c32:	d1ee      	bne.n	8004c12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024800 	.word	0x58024800

08004c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08c      	sub	sp, #48	; 0x30
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e3c8      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8087 	beq.w	8004d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c64:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c6e:	4b86      	ldr	r3, [pc, #536]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d007      	beq.n	8004c8a <HAL_RCC_OscConfig+0x46>
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b18      	cmp	r3, #24
 8004c7e:	d110      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x5e>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d10b      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x12c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d168      	bne.n	8004d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e3a2      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x76>
 8004cac:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e02e      	b.n	8004d18 <HAL_RCC_OscConfig+0xd4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x98>
 8004cc2:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a70      	ldr	r2, [pc, #448]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6d      	ldr	r2, [pc, #436]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e01d      	b.n	8004d18 <HAL_RCC_OscConfig+0xd4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0xbc>
 8004ce6:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a67      	ldr	r2, [pc, #412]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a64      	ldr	r2, [pc, #400]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0xd4>
 8004d00:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a60      	ldr	r2, [pc, #384]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5d      	ldr	r2, [pc, #372]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fc fe00 	bl	8001924 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fc fdfc 	bl	8001924 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e356      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d3a:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0xe4>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fc fdec 	bl	8001924 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fc fde8 	bl	8001924 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e342      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d62:	4b49      	ldr	r3, [pc, #292]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x10c>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 808c 	beq.w	8004e98 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_RCC_OscConfig+0x162>
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2b18      	cmp	r3, #24
 8004d9a:	d137      	bne.n	8004e0c <HAL_RCC_OscConfig+0x1c8>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d132      	bne.n	8004e0c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da6:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCC_OscConfig+0x17a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e314      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dbe:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 0219 	bic.w	r2, r3, #25
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	492f      	ldr	r1, [pc, #188]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fc fda8 	bl	8001924 <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fc fda4 	bl	8001924 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e2fe      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dea:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	4920      	ldr	r1, [pc, #128]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e0a:	e045      	b.n	8004e98 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d026      	beq.n	8004e62 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 0219 	bic.w	r2, r3, #25
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4919      	ldr	r1, [pc, #100]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fc fd7d 	bl	8001924 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2e:	f7fc fd79 	bl	8001924 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e2d3      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	490b      	ldr	r1, [pc, #44]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	e01a      	b.n	8004e98 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fd59 	bl	8001924 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fc fd55 	bl	8001924 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d903      	bls.n	8004e8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e2af      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
 8004e88:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e8c:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1ee      	bne.n	8004e76 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d06a      	beq.n	8004f7a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea4:	4b90      	ldr	r3, [pc, #576]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eae:	4b8e      	ldr	r3, [pc, #568]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d007      	beq.n	8004eca <HAL_RCC_OscConfig+0x286>
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b18      	cmp	r3, #24
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x2b4>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eca:	4b87      	ldr	r3, [pc, #540]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x29e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	2b80      	cmp	r3, #128	; 0x80
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e282      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee2:	4b81      	ldr	r3, [pc, #516]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	497d      	ldr	r1, [pc, #500]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef6:	e040      	b.n	8004f7a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d023      	beq.n	8004f48 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f00:	4b79      	ldr	r3, [pc, #484]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a78      	ldr	r2, [pc, #480]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fc fd0a 	bl	8001924 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f14:	f7fc fd06 	bl	8001924 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e260      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f26:	4b70      	ldr	r3, [pc, #448]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f32:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4969      	ldr	r1, [pc, #420]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
 8004f46:	e018      	b.n	8004f7a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f48:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a66      	ldr	r2, [pc, #408]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fc fce6 	bl	8001924 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f5c:	f7fc fce2 	bl	8001924 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e23c      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f6e:	4b5e      	ldr	r3, [pc, #376]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d036      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d019      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8e:	4b56      	ldr	r3, [pc, #344]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f92:	4a55      	ldr	r2, [pc, #340]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fc fcc3 	bl	8001924 <HAL_GetTick>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa2:	f7fc fcbf 	bl	8001924 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e219      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x35e>
 8004fc0:	e018      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc2:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc6:	4a48      	ldr	r2, [pc, #288]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fc fca9 	bl	8001924 <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7fc fca5 	bl	8001924 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e1ff      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fe8:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d036      	beq.n	800506e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d019      	beq.n	800503c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005008:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a36      	ldr	r2, [pc, #216]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 800500e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005012:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005014:	f7fc fc86 	bl	8001924 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501c:	f7fc fc82 	bl	8001924 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1dc      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x3d8>
 800503a:	e018      	b.n	800506e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8005042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005046:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005048:	f7fc fc6c 	bl	8001924 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7fc fc68 	bl	8001924 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1c2      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8086 	beq.w	8005188 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800507c:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <HAL_RCC_OscConfig+0x4a8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1a      	ldr	r2, [pc, #104]	; (80050ec <HAL_RCC_OscConfig+0x4a8>)
 8005082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005088:	f7fc fc4c 	bl	8001924 <HAL_GetTick>
 800508c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fc fc48 	bl	8001924 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	; 0x64
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e1a2      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_OscConfig+0x4a8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0x480>
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
 80050c2:	e032      	b.n	800512a <HAL_RCC_OscConfig+0x4e6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4ac>
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a02      	ldr	r2, [pc, #8]	; (80050e8 <HAL_RCC_OscConfig+0x4a4>)
 80050de:	f023 0304 	bic.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	e021      	b.n	800512a <HAL_RCC_OscConfig+0x4e6>
 80050e6:	bf00      	nop
 80050e8:	58024400 	.word	0x58024400
 80050ec:	58024800 	.word	0x58024800
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d10c      	bne.n	8005112 <HAL_RCC_OscConfig+0x4ce>
 80050f8:	4b83      	ldr	r3, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a82      	ldr	r2, [pc, #520]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	4b80      	ldr	r3, [pc, #512]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a7f      	ldr	r2, [pc, #508]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	e00b      	b.n	800512a <HAL_RCC_OscConfig+0x4e6>
 8005112:	4b7d      	ldr	r3, [pc, #500]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a7c      	ldr	r2, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b7a      	ldr	r3, [pc, #488]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a79      	ldr	r2, [pc, #484]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d015      	beq.n	800515e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fc fbf7 	bl	8001924 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fc fbf3 	bl	8001924 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e14b      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005150:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCC_OscConfig+0x4f6>
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc fbe1 	bl	8001924 <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fc fbdd 	bl	8001924 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e135      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800517c:	4b62      	ldr	r3, [pc, #392]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ee      	bne.n	8005166 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 812a 	beq.w	80053e6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005192:	4b5d      	ldr	r3, [pc, #372]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800519a:	2b18      	cmp	r3, #24
 800519c:	f000 80ba 	beq.w	8005314 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f040 8095 	bne.w	80052d4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a56      	ldr	r2, [pc, #344]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80051b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fc fbb5 	bl	8001924 <HAL_GetTick>
 80051ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051be:	f7fc fbb1 	bl	8001924 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e10b      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d0:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80051de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e0:	4b4a      	ldr	r3, [pc, #296]	; (800530c <HAL_RCC_OscConfig+0x6c8>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	430a      	orrs	r2, r1
 80051f0:	4945      	ldr	r1, [pc, #276]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	628b      	str	r3, [r1, #40]	; 0x28
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	3b01      	subs	r3, #1
 8005206:	025b      	lsls	r3, r3, #9
 8005208:	b29b      	uxth	r3, r3
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	3b01      	subs	r3, #1
 8005212:	041b      	lsls	r3, r3, #16
 8005214:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	3b01      	subs	r3, #1
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005226:	4938      	ldr	r1, [pc, #224]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a35      	ldr	r2, [pc, #212]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005238:	4b33      	ldr	r3, [pc, #204]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <HAL_RCC_OscConfig+0x6cc>)
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005244:	00d2      	lsls	r2, r2, #3
 8005246:	4930      	ldr	r1, [pc, #192]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800524c:	4b2e      	ldr	r3, [pc, #184]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f023 020c 	bic.w	r2, r3, #12
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	492b      	ldr	r1, [pc, #172]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	4313      	orrs	r3, r2
 800525c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	f023 0202 	bic.w	r2, r3, #2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	4927      	ldr	r1, [pc, #156]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005270:	4b25      	ldr	r3, [pc, #148]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a24      	ldr	r2, [pc, #144]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527c:	4b22      	ldr	r3, [pc, #136]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a21      	ldr	r2, [pc, #132]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005288:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800528e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005294:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc fb3a 	bl	8001924 <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fc fb36 	bl	8001924 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e090      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x670>
 80052d2:	e088      	b.n	80053e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fc fb20 	bl	8001924 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fc fb1c 	bl	8001924 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e076      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fa:	4b03      	ldr	r3, [pc, #12]	; (8005308 <HAL_RCC_OscConfig+0x6c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a4>
 8005306:	e06e      	b.n	80053e6 <HAL_RCC_OscConfig+0x7a2>
 8005308:	58024400 	.word	0x58024400
 800530c:	fffffc0c 	.word	0xfffffc0c
 8005310:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005314:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800531a:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b01      	cmp	r3, #1
 8005326:	d031      	beq.n	800538c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f003 0203 	and.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d12a      	bne.n	800538c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d122      	bne.n	800538c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d11a      	bne.n	800538c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	0a5b      	lsrs	r3, r3, #9
 800535a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d111      	bne.n	800538c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d108      	bne.n	800538c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	0e1b      	lsrs	r3, r3, #24
 800537e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e02b      	b.n	80053e8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	08db      	lsrs	r3, r3, #3
 8005396:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800539a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d01f      	beq.n	80053e6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053b2:	f7fc fab7 	bl	8001924 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053b8:	bf00      	nop
 80053ba:	f7fc fab3 	bl	8001924 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d0f9      	beq.n	80053ba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCC_OscConfig+0x7b0>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053d2:	00d2      	lsls	r2, r2, #3
 80053d4:	4906      	ldr	r1, [pc, #24]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <HAL_RCC_OscConfig+0x7ac>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3730      	adds	r7, #48	; 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	58024400 	.word	0x58024400
 80053f4:	ffff0007 	.word	0xffff0007

080053f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e19c      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800540c:	4b8a      	ldr	r3, [pc, #552]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d910      	bls.n	800543c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b87      	ldr	r3, [pc, #540]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 020f 	bic.w	r2, r3, #15
 8005422:	4985      	ldr	r1, [pc, #532]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b83      	ldr	r3, [pc, #524]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e184      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d010      	beq.n	800546a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	4b7b      	ldr	r3, [pc, #492]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005454:	429a      	cmp	r2, r3
 8005456:	d908      	bls.n	800546a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005458:	4b78      	ldr	r3, [pc, #480]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	4975      	ldr	r1, [pc, #468]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005466:	4313      	orrs	r3, r2
 8005468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	4b70      	ldr	r3, [pc, #448]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005482:	429a      	cmp	r2, r3
 8005484:	d908      	bls.n	8005498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005486:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	496a      	ldr	r1, [pc, #424]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005494:	4313      	orrs	r3, r2
 8005496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	4b64      	ldr	r3, [pc, #400]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d908      	bls.n	80054c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b4:	4b61      	ldr	r3, [pc, #388]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	495e      	ldr	r1, [pc, #376]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d010      	beq.n	80054f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	4b59      	ldr	r3, [pc, #356]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054de:	429a      	cmp	r2, r3
 80054e0:	d908      	bls.n	80054f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054e2:	4b56      	ldr	r3, [pc, #344]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4953      	ldr	r1, [pc, #332]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	4b4d      	ldr	r3, [pc, #308]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b4a      	ldr	r3, [pc, #296]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f023 020f 	bic.w	r2, r3, #15
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4947      	ldr	r1, [pc, #284]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800551e:	4313      	orrs	r3, r2
 8005520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d055      	beq.n	80055da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4940      	ldr	r1, [pc, #256]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800553c:	4313      	orrs	r3, r2
 800553e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d107      	bne.n	8005558 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005548:	4b3c      	ldr	r3, [pc, #240]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d121      	bne.n	8005598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0f6      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d107      	bne.n	8005570 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005560:	4b36      	ldr	r3, [pc, #216]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d115      	bne.n	8005598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0ea      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d107      	bne.n	8005588 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005578:	4b30      	ldr	r3, [pc, #192]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0de      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005588:	4b2c      	ldr	r3, [pc, #176]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0d6      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f023 0207 	bic.w	r2, r3, #7
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4925      	ldr	r1, [pc, #148]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fc f9bb 	bl	8001924 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b2:	f7fc f9b7 	bl	8001924 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e0be      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c8:	4b1c      	ldr	r3, [pc, #112]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d1eb      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	4b14      	ldr	r3, [pc, #80]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d208      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f6:	4b11      	ldr	r3, [pc, #68]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f023 020f 	bic.w	r2, r3, #15
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	490e      	ldr	r1, [pc, #56]	; (800563c <HAL_RCC_ClockConfig+0x244>)
 8005604:	4313      	orrs	r3, r2
 8005606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d214      	bcs.n	8005640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 020f 	bic.w	r2, r3, #15
 800561e:	4906      	ldr	r1, [pc, #24]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCC_ClockConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d005      	beq.n	8005640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e086      	b.n	8005746 <HAL_RCC_ClockConfig+0x34e>
 8005638:	52002000 	.word	0x52002000
 800563c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005658:	429a      	cmp	r2, r3
 800565a:	d208      	bcs.n	800566e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800565c:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	4939      	ldr	r1, [pc, #228]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 800566a:	4313      	orrs	r3, r2
 800566c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	4b34      	ldr	r3, [pc, #208]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005686:	429a      	cmp	r2, r3
 8005688:	d208      	bcs.n	800569c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800568a:	4b31      	ldr	r3, [pc, #196]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	492e      	ldr	r1, [pc, #184]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 8005698:	4313      	orrs	r3, r2
 800569a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	4b28      	ldr	r3, [pc, #160]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d208      	bcs.n	80056ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4922      	ldr	r1, [pc, #136]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d208      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4917      	ldr	r1, [pc, #92]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056f8:	f000 f834 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	4912      	ldr	r1, [pc, #72]	; (8005754 <HAL_RCC_ClockConfig+0x35c>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
 8005714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <HAL_RCC_ClockConfig+0x358>)
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <HAL_RCC_ClockConfig+0x35c>)
 8005720:	5cd3      	ldrb	r3, [r2, r3]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <HAL_RCC_ClockConfig+0x360>)
 800572e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005730:	4a0a      	ldr	r2, [pc, #40]	; (800575c <HAL_RCC_ClockConfig+0x364>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <HAL_RCC_ClockConfig+0x368>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fc f8a8 	bl	8001890 <HAL_InitTick>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	58024400 	.word	0x58024400
 8005754:	0800a840 	.word	0x0800a840
 8005758:	24000008 	.word	0x24000008
 800575c:	24000004 	.word	0x24000004
 8005760:	2400000c 	.word	0x2400000c

08005764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800576a:	4bb3      	ldr	r3, [pc, #716]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005772:	2b18      	cmp	r3, #24
 8005774:	f200 8155 	bhi.w	8005a22 <HAL_RCC_GetSysClockFreq+0x2be>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_RCC_GetSysClockFreq+0x1c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057e5 	.word	0x080057e5
 8005784:	08005a23 	.word	0x08005a23
 8005788:	08005a23 	.word	0x08005a23
 800578c:	08005a23 	.word	0x08005a23
 8005790:	08005a23 	.word	0x08005a23
 8005794:	08005a23 	.word	0x08005a23
 8005798:	08005a23 	.word	0x08005a23
 800579c:	08005a23 	.word	0x08005a23
 80057a0:	0800580b 	.word	0x0800580b
 80057a4:	08005a23 	.word	0x08005a23
 80057a8:	08005a23 	.word	0x08005a23
 80057ac:	08005a23 	.word	0x08005a23
 80057b0:	08005a23 	.word	0x08005a23
 80057b4:	08005a23 	.word	0x08005a23
 80057b8:	08005a23 	.word	0x08005a23
 80057bc:	08005a23 	.word	0x08005a23
 80057c0:	08005811 	.word	0x08005811
 80057c4:	08005a23 	.word	0x08005a23
 80057c8:	08005a23 	.word	0x08005a23
 80057cc:	08005a23 	.word	0x08005a23
 80057d0:	08005a23 	.word	0x08005a23
 80057d4:	08005a23 	.word	0x08005a23
 80057d8:	08005a23 	.word	0x08005a23
 80057dc:	08005a23 	.word	0x08005a23
 80057e0:	08005817 	.word	0x08005817
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e4:	4b94      	ldr	r3, [pc, #592]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f0:	4b91      	ldr	r3, [pc, #580]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	4a90      	ldr	r2, [pc, #576]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005802:	e111      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005804:	4b8d      	ldr	r3, [pc, #564]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005806:	61bb      	str	r3, [r7, #24]
      break;
 8005808:	e10e      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800580a:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800580c:	61bb      	str	r3, [r7, #24]
      break;
 800580e:	e10b      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005810:	4b8c      	ldr	r3, [pc, #560]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005812:	61bb      	str	r3, [r7, #24]
      break;
 8005814:	e108      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005816:	4b88      	ldr	r3, [pc, #544]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005820:	4b85      	ldr	r3, [pc, #532]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800582c:	4b82      	ldr	r3, [pc, #520]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005836:	4b80      	ldr	r3, [pc, #512]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80e1 	beq.w	8005a1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b02      	cmp	r3, #2
 800585e:	f000 8083 	beq.w	8005968 <HAL_RCC_GetSysClockFreq+0x204>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b02      	cmp	r3, #2
 8005866:	f200 80a1 	bhi.w	80059ac <HAL_RCC_GetSysClockFreq+0x248>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x114>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d056      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005876:	e099      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005878:	4b6f      	ldr	r3, [pc, #444]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02d      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005884:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	08db      	lsrs	r3, r3, #3
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	4a6b      	ldr	r2, [pc, #428]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
 8005894:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b62      	ldr	r3, [pc, #392]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058de:	e087      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b51      	ldr	r3, [pc, #324]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a02 	vldr	s12, [r7, #8]
 8005906:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005922:	e065      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005936:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005946:	ed97 6a02 	vldr	s12, [r7, #8]
 800594a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005966:	e043      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597a:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	ed97 6a02 	vldr	s12, [r7, #8]
 800598e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800599e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059aa:	e021      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	0a5b      	lsrs	r3, r3, #9
 80059f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fa:	3301      	adds	r3, #1
 80059fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a14:	ee17 3a90 	vmov	r3, s15
 8005a18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a1a:	e005      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
      break;
 8005a20:	e002      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a24:	61bb      	str	r3, [r7, #24]
      break;
 8005a26:	bf00      	nop
  }

  return sysclockfreq;
 8005a28:	69bb      	ldr	r3, [r7, #24]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3724      	adds	r7, #36	; 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	03d09000 	.word	0x03d09000
 8005a40:	003d0900 	.word	0x003d0900
 8005a44:	007a1200 	.word	0x007a1200
 8005a48:	46000000 	.word	0x46000000
 8005a4c:	4c742400 	.word	0x4c742400
 8005a50:	4a742400 	.word	0x4a742400
 8005a54:	4af42400 	.word	0x4af42400

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a5e:	f7ff fe81 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490f      	ldr	r1, [pc, #60]	; (8005aac <HAL_RCC_GetHCLKFreq+0x54>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <HAL_RCC_GetHCLKFreq+0x54>)
 8005a86:	5cd3      	ldrb	r3, [r2, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	4a07      	ldr	r2, [pc, #28]	; (8005ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a96:	4a07      	ldr	r2, [pc, #28]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	0800a840 	.word	0x0800a840
 8005ab0:	24000008 	.word	0x24000008
 8005ab4:	24000004 	.word	0x24000004

08005ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005abc:	f7ff ffcc 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4904      	ldr	r1, [pc, #16]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	0800a840 	.word	0x0800a840

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ae8:	f7ff ffb6 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4904      	ldr	r1, [pc, #16]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	0800a840 	.word	0x0800a840

08005b10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b14:	b0c6      	sub	sp, #280	; 0x118
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005b34:	2500      	movs	r5, #0
 8005b36:	ea54 0305 	orrs.w	r3, r4, r5
 8005b3a:	d049      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b46:	d02f      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b4c:	d828      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b52:	d01a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b58:	d822      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b62:	d007      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b64:	e01c      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b66:	4bab      	ldr	r3, [pc, #684]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4aaa      	ldr	r2, [pc, #680]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b72:	e01a      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b78:	3308      	adds	r3, #8
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fc25 	bl	80073cc <RCCEx_PLL2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	3328      	adds	r3, #40	; 0x28
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fccc 	bl	8007530 <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bb2:	4b98      	ldr	r3, [pc, #608]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc0:	4a94      	ldr	r2, [pc, #592]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6513      	str	r3, [r2, #80]	; 0x50
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005bdc:	f04f 0900 	mov.w	r9, #0
 8005be0:	ea58 0309 	orrs.w	r3, r8, r9
 8005be4:	d047      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d82a      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c0d 	.word	0x08005c0d
 8005bfc:	08005c1b 	.word	0x08005c1b
 8005c00:	08005c31 	.word	0x08005c31
 8005c04:	08005c4f 	.word	0x08005c4f
 8005c08:	08005c4f 	.word	0x08005c4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a80      	ldr	r2, [pc, #512]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c18:	e01a      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fbd2 	bl	80073cc <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c2e:	e00f      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	3328      	adds	r3, #40	; 0x28
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fc79 	bl	8007530 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c44:	e004      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c58:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	f023 0107 	bic.w	r1, r3, #7
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005c82:	f04f 0b00 	mov.w	fp, #0
 8005c86:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c8a:	d05b      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c94:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c98:	d03b      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c9a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c9e:	d834      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca4:	d037      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005caa:	d82e      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cb0:	d033      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cb6:	d828      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cbc:	d01a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc2:	d822      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005cc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ccc:	d007      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005cce:	e01c      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd0:	4b50      	ldr	r3, [pc, #320]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	4a4f      	ldr	r2, [pc, #316]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cdc:	e01e      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fb70 	bl	80073cc <RCCEx_PLL2_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cf2:	e013      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	3328      	adds	r3, #40	; 0x28
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 fc17 	bl	8007530 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d08:	e008      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d34:	4a37      	ldr	r2, [pc, #220]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d36:	430b      	orrs	r3, r1
 8005d38:	6593      	str	r3, [r2, #88]	; 0x58
 8005d3a:	e003      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d54:	2300      	movs	r3, #0
 8005d56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4313      	orrs	r3, r2
 8005d62:	d05d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d70:	d03b      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d76:	d834      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d7c:	d037      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d82:	d82e      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d88:	d033      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d8e:	d828      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d94:	d01a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d9a:	d822      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da4:	d007      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005da6:	e01c      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db4:	e01e      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fb04 	bl	80073cc <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dca:	e013      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd0:	3328      	adds	r3, #40	; 0x28
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fbab 	bl	8007530 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de0:	e008      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005de8:	e004      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dea:	bf00      	nop
 8005dec:	e002      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e0c:	4a01      	ldr	r2, [pc, #4]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6593      	str	r3, [r2, #88]	; 0x58
 8005e12:	e005      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e36:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d03a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e46:	2b30      	cmp	r3, #48	; 0x30
 8005e48:	d01f      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e4a:	2b30      	cmp	r3, #48	; 0x30
 8005e4c:	d819      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d00c      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d815      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d019      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d111      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5e:	4baa      	ldr	r3, [pc, #680]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4aa9      	ldr	r2, [pc, #676]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e6a:	e011      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	3308      	adds	r3, #8
 8005e72:	2102      	movs	r1, #2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 faa9 	bl	80073cc <RCCEx_PLL2_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e80:	e006      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e88:	e002      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e98:	4b9b      	ldr	r3, [pc, #620]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	4a98      	ldr	r2, [pc, #608]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eac:	e003      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ecc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d051      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee0:	d035      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee6:	d82e      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ee8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eec:	d031      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ef2:	d828      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d01a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	d822      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	d007      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f0a:	e01c      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0c:	4b7e      	ldr	r3, [pc, #504]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	4a7d      	ldr	r2, [pc, #500]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f18:	e01c      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	3308      	adds	r3, #8
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 fa52 	bl	80073cc <RCCEx_PLL2_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f2e:	e011      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	3328      	adds	r3, #40	; 0x28
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 faf9 	bl	8007530 <RCCEx_PLL3_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f44:	e006      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f4c:	e002      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f5c:	4b6a      	ldr	r3, [pc, #424]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	4a67      	ldr	r2, [pc, #412]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6513      	str	r3, [r2, #80]	; 0x50
 8005f70:	e003      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d053      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fa4:	d033      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005faa:	d82c      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fb0:	d02f      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fb6:	d826      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fbc:	d02b      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fc2:	d820      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc8:	d012      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fce:	d81a      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d022      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d115      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 f9f2 	bl	80073cc <RCCEx_PLL2_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fee:	e015      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	3328      	adds	r3, #40	; 0x28
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fa99 	bl	8007530 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006004:	e00a      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800600c:	e006      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800600e:	bf00      	nop
 8006010:	e004      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006012:	bf00      	nop
 8006014:	e002      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800601a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006024:	4b38      	ldr	r3, [pc, #224]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	4a35      	ldr	r2, [pc, #212]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006034:	430b      	orrs	r3, r1
 8006036:	6513      	str	r3, [r2, #80]	; 0x50
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800603e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800604e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006052:	2300      	movs	r3, #0
 8006054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006058:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d058      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800606a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606e:	d033      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006074:	d82c      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d02f      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d826      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006086:	d02b      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800608c:	d820      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800608e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006092:	d012      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006098:	d81a      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d022      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800609e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a2:	d115      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a8:	3308      	adds	r3, #8
 80060aa:	2101      	movs	r1, #1
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 f98d 	bl	80073cc <RCCEx_PLL2_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	3328      	adds	r3, #40	; 0x28
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fa34 	bl	8007530 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060ce:	e00a      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060d6:	e006      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060d8:	bf00      	nop
 80060da:	e004      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060dc:	bf00      	nop
 80060de:	e002      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060fe:	4a02      	ldr	r2, [pc, #8]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006100:	430b      	orrs	r3, r1
 8006102:	6593      	str	r3, [r2, #88]	; 0x58
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006124:	2300      	movs	r3, #0
 8006126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800612a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800612e:	460b      	mov	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	d037      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613e:	d00e      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006144:	d816      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800614a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800614e:	d111      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006150:	4bc4      	ldr	r3, [pc, #784]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4ac3      	ldr	r2, [pc, #780]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800615a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800615c:	e00f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006162:	3308      	adds	r3, #8
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f930 	bl	80073cc <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006172:	e004      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006186:	4bb7      	ldr	r3, [pc, #732]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006194:	4ab3      	ldr	r2, [pc, #716]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006196:	430b      	orrs	r3, r1
 8006198:	6513      	str	r3, [r2, #80]	; 0x50
 800619a:	e003      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80061b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061be:	460b      	mov	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	d039      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d81c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	08006211 	.word	0x08006211
 80061d8:	080061e5 	.word	0x080061e5
 80061dc:	080061f3 	.word	0x080061f3
 80061e0:	08006211 	.word	0x08006211
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4b9f      	ldr	r3, [pc, #636]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a9e      	ldr	r2, [pc, #632]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061f0:	e00f      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	3308      	adds	r3, #8
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f8e6 	bl	80073cc <RCCEx_PLL2_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006206:	e004      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800621a:	4b92      	ldr	r3, [pc, #584]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	f023 0103 	bic.w	r1, r3, #3
 8006222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006228:	4a8e      	ldr	r2, [pc, #568]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800622a:	430b      	orrs	r3, r1
 800622c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800622e:	e003      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006234:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800624e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	f000 8099 	beq.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625a:	4b83      	ldr	r3, [pc, #524]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a82      	ldr	r2, [pc, #520]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006266:	f7fb fb5d 	bl	8001924 <HAL_GetTick>
 800626a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626e:	e00b      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006270:	f7fb fb58 	bl	8001924 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b64      	cmp	r3, #100	; 0x64
 800627e:	d903      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006286:	e005      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006288:	4b77      	ldr	r3, [pc, #476]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0ed      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006298:	2b00      	cmp	r3, #0
 800629a:	d173      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800629c:	4b71      	ldr	r3, [pc, #452]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062a8:	4053      	eors	r3, r2
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d015      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b2:	4b6c      	ldr	r3, [pc, #432]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062be:	4b69      	ldr	r3, [pc, #420]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a68      	ldr	r2, [pc, #416]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ca:	4b66      	ldr	r3, [pc, #408]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	4a65      	ldr	r2, [pc, #404]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062d6:	4a63      	ldr	r2, [pc, #396]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ea:	d118      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fb fb1a 	bl	8001924 <HAL_GetTick>
 80062f0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f4:	e00d      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fb fb15 	bl	8001924 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006300:	1ad2      	subs	r2, r2, r3
 8006302:	f241 3388 	movw	r3, #5000	; 0x1388
 8006306:	429a      	cmp	r2, r3
 8006308:	d903      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006310:	e005      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006312:	4b54      	ldr	r3, [pc, #336]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0eb      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800631e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006322:	2b00      	cmp	r3, #0
 8006324:	d129      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006336:	d10e      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006338:	4b4a      	ldr	r3, [pc, #296]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006344:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006348:	091a      	lsrs	r2, r3, #4
 800634a:	4b48      	ldr	r3, [pc, #288]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800634c:	4013      	ands	r3, r2
 800634e:	4a45      	ldr	r2, [pc, #276]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6113      	str	r3, [r2, #16]
 8006354:	e005      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006356:	4b43      	ldr	r3, [pc, #268]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4a42      	ldr	r2, [pc, #264]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006360:	6113      	str	r3, [r2, #16]
 8006362:	4b40      	ldr	r3, [pc, #256]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006364:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800636e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006372:	4a3c      	ldr	r2, [pc, #240]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6713      	str	r3, [r2, #112]	; 0x70
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800637a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800637e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006382:	e003      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006388:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f002 0301 	and.w	r3, r2, #1
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800639c:	2300      	movs	r3, #0
 800639e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f000 808f 	beq.w	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d871      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080064a5 	.word	0x080064a5
 80063c4:	0800649d 	.word	0x0800649d
 80063c8:	0800649d 	.word	0x0800649d
 80063cc:	0800649d 	.word	0x0800649d
 80063d0:	0800649d 	.word	0x0800649d
 80063d4:	0800649d 	.word	0x0800649d
 80063d8:	0800649d 	.word	0x0800649d
 80063dc:	0800649d 	.word	0x0800649d
 80063e0:	08006471 	.word	0x08006471
 80063e4:	0800649d 	.word	0x0800649d
 80063e8:	0800649d 	.word	0x0800649d
 80063ec:	0800649d 	.word	0x0800649d
 80063f0:	0800649d 	.word	0x0800649d
 80063f4:	0800649d 	.word	0x0800649d
 80063f8:	0800649d 	.word	0x0800649d
 80063fc:	0800649d 	.word	0x0800649d
 8006400:	08006487 	.word	0x08006487
 8006404:	0800649d 	.word	0x0800649d
 8006408:	0800649d 	.word	0x0800649d
 800640c:	0800649d 	.word	0x0800649d
 8006410:	0800649d 	.word	0x0800649d
 8006414:	0800649d 	.word	0x0800649d
 8006418:	0800649d 	.word	0x0800649d
 800641c:	0800649d 	.word	0x0800649d
 8006420:	080064a5 	.word	0x080064a5
 8006424:	0800649d 	.word	0x0800649d
 8006428:	0800649d 	.word	0x0800649d
 800642c:	0800649d 	.word	0x0800649d
 8006430:	0800649d 	.word	0x0800649d
 8006434:	0800649d 	.word	0x0800649d
 8006438:	0800649d 	.word	0x0800649d
 800643c:	0800649d 	.word	0x0800649d
 8006440:	080064a5 	.word	0x080064a5
 8006444:	0800649d 	.word	0x0800649d
 8006448:	0800649d 	.word	0x0800649d
 800644c:	0800649d 	.word	0x0800649d
 8006450:	0800649d 	.word	0x0800649d
 8006454:	0800649d 	.word	0x0800649d
 8006458:	0800649d 	.word	0x0800649d
 800645c:	0800649d 	.word	0x0800649d
 8006460:	080064a5 	.word	0x080064a5
 8006464:	58024400 	.word	0x58024400
 8006468:	58024800 	.word	0x58024800
 800646c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	3308      	adds	r3, #8
 8006476:	2101      	movs	r1, #1
 8006478:	4618      	mov	r0, r3
 800647a:	f000 ffa7 	bl	80073cc <RCCEx_PLL2_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006484:	e00f      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	3328      	adds	r3, #40	; 0x28
 800648c:	2101      	movs	r1, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f001 f84e 	bl	8007530 <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800649a:	e004      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064ae:	4bbf      	ldr	r3, [pc, #764]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064bc:	4abb      	ldr	r2, [pc, #748]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	6553      	str	r3, [r2, #84]	; 0x54
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f002 0302 	and.w	r3, r2, #2
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d041      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d824      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006549 	.word	0x08006549
 8006500:	08006515 	.word	0x08006515
 8006504:	0800652b 	.word	0x0800652b
 8006508:	08006549 	.word	0x08006549
 800650c:	08006549 	.word	0x08006549
 8006510:	08006549 	.word	0x08006549
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	3308      	adds	r3, #8
 800651a:	2101      	movs	r1, #1
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ff55 	bl	80073cc <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006528:	e00f      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652e:	3328      	adds	r3, #40	; 0x28
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fffc 	bl	8007530 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800653e:	e004      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006552:	4b96      	ldr	r3, [pc, #600]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	f023 0107 	bic.w	r1, r3, #7
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006560:	4a92      	ldr	r2, [pc, #584]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006562:	430b      	orrs	r3, r1
 8006564:	6553      	str	r3, [r2, #84]	; 0x54
 8006566:	e003      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800656c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0304 	and.w	r3, r2, #4
 800657c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006586:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d044      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	2b05      	cmp	r3, #5
 800659a:	d825      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065f1 	.word	0x080065f1
 80065a8:	080065bd 	.word	0x080065bd
 80065ac:	080065d3 	.word	0x080065d3
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065f1 	.word	0x080065f1
 80065b8:	080065f1 	.word	0x080065f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c0:	3308      	adds	r3, #8
 80065c2:	2101      	movs	r1, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 ff01 	bl	80073cc <RCCEx_PLL2_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065d0:	e00f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	3328      	adds	r3, #40	; 0x28
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 ffa8 	bl	8007530 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065fa:	4b6c      	ldr	r3, [pc, #432]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f023 0107 	bic.w	r1, r3, #7
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	4a68      	ldr	r2, [pc, #416]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800660c:	430b      	orrs	r3, r1
 800660e:	6593      	str	r3, [r2, #88]	; 0x58
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006616:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f002 0320 	and.w	r3, r2, #32
 8006626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006630:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d055      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006646:	d033      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800664c:	d82c      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d02f      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006658:	d826      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800665a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800665e:	d02b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006664:	d820      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666a:	d012      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006670:	d81a      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d022      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667a:	d115      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	3308      	adds	r3, #8
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fea1 	bl	80073cc <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006690:	e015      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	3328      	adds	r3, #40	; 0x28
 8006698:	2102      	movs	r1, #2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 ff48 	bl	8007530 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066a6:	e00a      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066ae:	e006      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066b0:	bf00      	nop
 80066b2:	e004      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066c6:	4b39      	ldr	r3, [pc, #228]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d6:	4a35      	ldr	r2, [pc, #212]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6553      	str	r3, [r2, #84]	; 0x54
 80066dc:	e003      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80066f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d058      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800670e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006712:	d033      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006718:	d82c      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d02f      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d826      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800672a:	d02b      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800672c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006730:	d820      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006736:	d012      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673c:	d81a      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d022      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d115      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674c:	3308      	adds	r3, #8
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fe3b 	bl	80073cc <RCCEx_PLL2_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800675c:	e015      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	3328      	adds	r3, #40	; 0x28
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fee2 	bl	8007530 <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006772:	e00a      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800677a:	e006      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800677c:	bf00      	nop
 800677e:	e004      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006780:	bf00      	nop
 8006782:	e002      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006784:	bf00      	nop
 8006786:	e000      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10e      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006796:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a2:	4a02      	ldr	r2, [pc, #8]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a4:	430b      	orrs	r3, r1
 80067a6:	6593      	str	r3, [r2, #88]	; 0x58
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067aa:	bf00      	nop
 80067ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80067c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80067d2:	460b      	mov	r3, r1
 80067d4:	4313      	orrs	r3, r2
 80067d6:	d055      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067e4:	d033      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067ea:	d82c      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	d02f      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f6:	d826      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067fc:	d02b      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006802:	d820      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006808:	d012      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800680a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680e:	d81a      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d022      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006818:	d115      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	3308      	adds	r3, #8
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fdd2 	bl	80073cc <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800682e:	e015      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	3328      	adds	r3, #40	; 0x28
 8006836:	2102      	movs	r1, #2
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fe79 	bl	8007530 <RCCEx_PLL3_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006844:	e00a      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800684c:	e006      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800685a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006864:	4ba0      	ldr	r3, [pc, #640]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006868:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006874:	4a9c      	ldr	r2, [pc, #624]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006876:	430b      	orrs	r3, r1
 8006878:	6593      	str	r3, [r2, #88]	; 0x58
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006880:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f002 0308 	and.w	r3, r2, #8
 8006890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006894:	2300      	movs	r3, #0
 8006896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800689a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800689e:	460b      	mov	r3, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d01e      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d10c      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b6:	3328      	adds	r3, #40	; 0x28
 80068b8:	2102      	movs	r1, #2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fe38 	bl	8007530 <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068cc:	4b86      	ldr	r3, [pc, #536]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068dc:	4a82      	ldr	r2, [pc, #520]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068de:	430b      	orrs	r3, r1
 80068e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f002 0310 	and.w	r3, r2, #16
 80068ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068f2:	2300      	movs	r3, #0
 80068f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d01e      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800690a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690e:	d10c      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006914:	3328      	adds	r3, #40	; 0x28
 8006916:	2102      	movs	r1, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe09 	bl	8007530 <RCCEx_PLL3_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800692a:	4b6f      	ldr	r3, [pc, #444]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693a:	4a6b      	ldr	r2, [pc, #428]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800693c:	430b      	orrs	r3, r1
 800693e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800694c:	67bb      	str	r3, [r7, #120]	; 0x78
 800694e:	2300      	movs	r3, #0
 8006950:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006952:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d03e      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006968:	d022      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800696a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696e:	d81b      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006978:	d00b      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800697a:	e015      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006980:	3308      	adds	r3, #8
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd21 	bl	80073cc <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006990:	e00f      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	3328      	adds	r3, #40	; 0x28
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fdc8 	bl	8007530 <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069a6:	e004      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069ba:	4b4b      	ldr	r3, [pc, #300]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069ca:	4a47      	ldr	r2, [pc, #284]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6593      	str	r3, [r2, #88]	; 0x58
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80069e6:	673b      	str	r3, [r7, #112]	; 0x70
 80069e8:	2300      	movs	r3, #0
 80069ea:	677b      	str	r3, [r7, #116]	; 0x74
 80069ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d03b      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a02:	d01f      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a08:	d818      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a0e:	d003      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a14:	d007      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a16:	e011      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a18:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a24:	e00f      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	3328      	adds	r3, #40	; 0x28
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fd7e 	bl	8007530 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a4e:	4b26      	ldr	r3, [pc, #152]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a5e:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6553      	str	r3, [r2, #84]	; 0x54
 8006a64:	e003      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a80:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a84:	460b      	mov	r3, r1
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d034      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d007      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a9a:	e011      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a11      	ldr	r2, [pc, #68]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00e      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fc8a 	bl	80073cc <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	4a02      	ldr	r2, [pc, #8]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006b00:	663b      	str	r3, [r7, #96]	; 0x60
 8006b02:	2300      	movs	r3, #0
 8006b04:	667b      	str	r3, [r7, #100]	; 0x64
 8006b06:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	d00c      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b14:	3328      	adds	r3, #40	; 0x28
 8006b16:	2102      	movs	r1, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fd09 	bl	8007530 <RCCEx_PLL3_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b38:	2300      	movs	r3, #0
 8006b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b3c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d036      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b50:	d018      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b56:	d811      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5c:	d014      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b62:	d80b      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6c:	d106      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6e:	4bb7      	ldr	r3, [pc, #732]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b72:	4ab6      	ldr	r2, [pc, #728]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b96:	4bad      	ldr	r3, [pc, #692]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba4:	4aa9      	ldr	r2, [pc, #676]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6553      	str	r3, [r2, #84]	; 0x54
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8006bc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bd0:	4b9e      	ldr	r3, [pc, #632]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	4a9b      	ldr	r2, [pc, #620]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c00:	4b92      	ldr	r3, [pc, #584]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c0e:	4a8f      	ldr	r2, [pc, #572]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006c20:	643b      	str	r3, [r7, #64]	; 0x40
 8006c22:	2300      	movs	r3, #0
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
 8006c26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c30:	4b86      	ldr	r3, [pc, #536]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	4a85      	ldr	r2, [pc, #532]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c3a:	6113      	str	r3, [r2, #16]
 8006c3c:	4b83      	ldr	r3, [pc, #524]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3e:	6919      	ldr	r1, [r3, #16]
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c48:	4a80      	ldr	r2, [pc, #512]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c6a:	4b78      	ldr	r3, [pc, #480]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	4a74      	ldr	r2, [pc, #464]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c94:	460b      	mov	r3, r1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	d00a      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	4a68      	ldr	r2, [pc, #416]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	d011      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fb79 	bl	80073cc <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	6239      	str	r1, [r7, #32]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
 8006d02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d06:	460b      	mov	r3, r1
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	d011      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	3308      	adds	r3, #8
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fb59 	bl	80073cc <RCCEx_PLL2_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	61b9      	str	r1, [r7, #24]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d011      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	3308      	adds	r3, #8
 8006d52:	2102      	movs	r1, #2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fb39 	bl	80073cc <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6139      	str	r1, [r7, #16]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d86:	460b      	mov	r3, r1
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	d011      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	3328      	adds	r3, #40	; 0x28
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fbcb 	bl	8007530 <RCCEx_PLL3_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	2100      	movs	r1, #0
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	d011      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	3328      	adds	r3, #40	; 0x28
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fbab 	bl	8007530 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6039      	str	r1, [r7, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e06:	460b      	mov	r3, r1
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d011      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e10:	3328      	adds	r3, #40	; 0x28
 8006e12:	2102      	movs	r1, #2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fb8b 	bl	8007530 <RCCEx_PLL3_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006e30:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400

08006e50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e54:	f7fe fe00 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4904      	ldr	r1, [pc, #16]	; (8006e78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	58024400 	.word	0x58024400
 8006e78:	0800a840 	.word	0x0800a840

08006e7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b089      	sub	sp, #36	; 0x24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e84:	4ba1      	ldr	r3, [pc, #644]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e8e:	4b9f      	ldr	r3, [pc, #636]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	0b1b      	lsrs	r3, r3, #12
 8006e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e9a:	4b9c      	ldr	r3, [pc, #624]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ea6:	4b99      	ldr	r3, [pc, #612]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	08db      	lsrs	r3, r3, #3
 8006eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8111 	beq.w	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	f000 8083 	beq.w	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	f200 80a1 	bhi.w	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d056      	beq.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ee6:	e099      	b.n	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee8:	4b88      	ldr	r3, [pc, #544]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d02d      	beq.n	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef4:	4b85      	ldr	r3, [pc, #532]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	4a84      	ldr	r2, [pc, #528]	; (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b7b      	ldr	r3, [pc, #492]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f4e:	e087      	b.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b6a      	ldr	r3, [pc, #424]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f92:	e065      	b.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b59      	ldr	r3, [pc, #356]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd6:	e043      	b.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fea:	4b48      	ldr	r3, [pc, #288]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800701a:	e021      	b.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800702a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702e:	4b37      	ldr	r3, [pc, #220]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007042:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800705e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007060:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800707a:	edd7 6a07 	vldr	s13, [r7, #28]
 800707e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007086:	ee17 2a90 	vmov	r2, s15
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	0c1b      	lsrs	r3, r3, #16
 8007094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b4:	ee17 2a90 	vmov	r2, s15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	0e1b      	lsrs	r3, r3, #24
 80070c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e2:	ee17 2a90 	vmov	r2, s15
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
}
 80070fe:	bf00      	nop
 8007100:	3724      	adds	r7, #36	; 0x24
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	58024400 	.word	0x58024400
 8007110:	03d09000 	.word	0x03d09000
 8007114:	46000000 	.word	0x46000000
 8007118:	4c742400 	.word	0x4c742400
 800711c:	4a742400 	.word	0x4a742400
 8007120:	4af42400 	.word	0x4af42400

08007124 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800712c:	4ba1      	ldr	r3, [pc, #644]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007136:	4b9f      	ldr	r3, [pc, #636]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	0d1b      	lsrs	r3, r3, #20
 800713c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007140:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007142:	4b9c      	ldr	r3, [pc, #624]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800714e:	4b99      	ldr	r3, [pc, #612]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	08db      	lsrs	r3, r3, #3
 8007154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8111 	beq.w	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f000 8083 	beq.w	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f200 80a1 	bhi.w	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d056      	beq.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800718e:	e099      	b.n	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007190:	4b88      	ldr	r3, [pc, #544]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02d      	beq.n	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719c:	4b85      	ldr	r3, [pc, #532]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	08db      	lsrs	r3, r3, #3
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	4a84      	ldr	r2, [pc, #528]	; (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071f6:	e087      	b.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b6a      	ldr	r3, [pc, #424]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723a:	e065      	b.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727e:	e043      	b.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b48      	ldr	r3, [pc, #288]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c2:	e021      	b.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007306:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	0a5b      	lsrs	r3, r3, #9
 800730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007322:	edd7 6a07 	vldr	s13, [r7, #28]
 8007326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	ee17 2a90 	vmov	r2, s15
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007336:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007350:	edd7 6a07 	vldr	s13, [r7, #28]
 8007354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735c:	ee17 2a90 	vmov	r2, s15
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738a:	ee17 2a90 	vmov	r2, s15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007392:	e008      	b.n	80073a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
}
 80073a6:	bf00      	nop
 80073a8:	3724      	adds	r7, #36	; 0x24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
 80073b8:	03d09000 	.word	0x03d09000
 80073bc:	46000000 	.word	0x46000000
 80073c0:	4c742400 	.word	0x4c742400
 80073c4:	4a742400 	.word	0x4a742400
 80073c8:	4af42400 	.word	0x4af42400

080073cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073da:	4b53      	ldr	r3, [pc, #332]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d101      	bne.n	80073ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e099      	b.n	800751e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073ea:	4b4f      	ldr	r3, [pc, #316]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a4e      	ldr	r2, [pc, #312]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f6:	f7fa fa95 	bl	8001924 <HAL_GetTick>
 80073fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073fc:	e008      	b.n	8007410 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073fe:	f7fa fa91 	bl	8001924 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e086      	b.n	800751e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007410:	4b45      	ldr	r3, [pc, #276]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f0      	bne.n	80073fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800741c:	4b42      	ldr	r3, [pc, #264]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	493f      	ldr	r1, [pc, #252]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800742c:	4313      	orrs	r3, r2
 800742e:	628b      	str	r3, [r1, #40]	; 0x28
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	3b01      	subs	r3, #1
 8007436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	3b01      	subs	r3, #1
 8007440:	025b      	lsls	r3, r3, #9
 8007442:	b29b      	uxth	r3, r3
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	3b01      	subs	r3, #1
 800744c:	041b      	lsls	r3, r3, #16
 800744e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	3b01      	subs	r3, #1
 800745a:	061b      	lsls	r3, r3, #24
 800745c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007460:	4931      	ldr	r1, [pc, #196]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	492d      	ldr	r1, [pc, #180]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007474:	4313      	orrs	r3, r2
 8007476:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007478:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f023 0220 	bic.w	r2, r3, #32
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	4928      	ldr	r1, [pc, #160]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007486:	4313      	orrs	r3, r2
 8007488:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800748a:	4b27      	ldr	r3, [pc, #156]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	4a26      	ldr	r2, [pc, #152]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007490:	f023 0310 	bic.w	r3, r3, #16
 8007494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800749a:	4b24      	ldr	r3, [pc, #144]	; (800752c <RCCEx_PLL2_Config+0x160>)
 800749c:	4013      	ands	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	69d2      	ldr	r2, [r2, #28]
 80074a2:	00d2      	lsls	r2, r2, #3
 80074a4:	4920      	ldr	r1, [pc, #128]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074aa:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074b0:	f043 0310 	orr.w	r3, r3, #16
 80074b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074bc:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	4a19      	ldr	r2, [pc, #100]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074c8:	e00f      	b.n	80074ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074d0:	4b15      	ldr	r3, [pc, #84]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a14      	ldr	r2, [pc, #80]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074dc:	e005      	b.n	80074ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	4a11      	ldr	r2, [pc, #68]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a0e      	ldr	r2, [pc, #56]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f6:	f7fa fa15 	bl	8001924 <HAL_GetTick>
 80074fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074fc:	e008      	b.n	8007510 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074fe:	f7fa fa11 	bl	8001924 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	58024400 	.word	0x58024400
 800752c:	ffff0007 	.word	0xffff0007

08007530 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800753e:	4b53      	ldr	r3, [pc, #332]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d101      	bne.n	800754e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e099      	b.n	8007682 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800754e:	4b4f      	ldr	r3, [pc, #316]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a4e      	ldr	r2, [pc, #312]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755a:	f7fa f9e3 	bl	8001924 <HAL_GetTick>
 800755e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007560:	e008      	b.n	8007574 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007562:	f7fa f9df 	bl	8001924 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e086      	b.n	8007682 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007574:	4b45      	ldr	r3, [pc, #276]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f0      	bne.n	8007562 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007580:	4b42      	ldr	r3, [pc, #264]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	051b      	lsls	r3, r3, #20
 800758e:	493f      	ldr	r1, [pc, #252]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	628b      	str	r3, [r1, #40]	; 0x28
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	3b01      	subs	r3, #1
 800759a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	025b      	lsls	r3, r3, #9
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	3b01      	subs	r3, #1
 80075be:	061b      	lsls	r3, r3, #24
 80075c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075c4:	4931      	ldr	r1, [pc, #196]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075ca:	4b30      	ldr	r3, [pc, #192]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	492d      	ldr	r1, [pc, #180]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	4928      	ldr	r1, [pc, #160]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ee:	4b27      	ldr	r3, [pc, #156]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	4a26      	ldr	r2, [pc, #152]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075fa:	4b24      	ldr	r3, [pc, #144]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <RCCEx_PLL3_Config+0x160>)
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	69d2      	ldr	r2, [r2, #28]
 8007606:	00d2      	lsls	r2, r2, #3
 8007608:	4920      	ldr	r1, [pc, #128]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 800760a:	4313      	orrs	r3, r2
 800760c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800760e:	4b1f      	ldr	r3, [pc, #124]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007620:	4b1a      	ldr	r3, [pc, #104]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	4a19      	ldr	r2, [pc, #100]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007626:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800762a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800762c:	e00f      	b.n	800764e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4a14      	ldr	r2, [pc, #80]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 800763a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007640:	e005      	b.n	800764e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007642:	4b12      	ldr	r3, [pc, #72]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a11      	ldr	r2, [pc, #68]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a0e      	ldr	r2, [pc, #56]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765a:	f7fa f963 	bl	8001924 <HAL_GetTick>
 800765e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007660:	e008      	b.n	8007674 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007662:	f7fa f95f 	bl	8001924 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d901      	bls.n	8007674 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e006      	b.n	8007682 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
 8007690:	ffff0007 	.word	0xffff0007

08007694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e049      	b.n	800773a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7f9 fe18 	bl	80012f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f000 fa66 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <HAL_TIM_PWM_Start+0x24>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	e03c      	b.n	80077e2 <HAL_TIM_PWM_Start+0x9e>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b04      	cmp	r3, #4
 800776c:	d109      	bne.n	8007782 <HAL_TIM_PWM_Start+0x3e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b01      	cmp	r3, #1
 8007778:	bf14      	ite	ne
 800777a:	2301      	movne	r3, #1
 800777c:	2300      	moveq	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	e02f      	b.n	80077e2 <HAL_TIM_PWM_Start+0x9e>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d109      	bne.n	800779c <HAL_TIM_PWM_Start+0x58>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	bf14      	ite	ne
 8007794:	2301      	movne	r3, #1
 8007796:	2300      	moveq	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	e022      	b.n	80077e2 <HAL_TIM_PWM_Start+0x9e>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d109      	bne.n	80077b6 <HAL_TIM_PWM_Start+0x72>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e015      	b.n	80077e2 <HAL_TIM_PWM_Start+0x9e>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d109      	bne.n	80077d0 <HAL_TIM_PWM_Start+0x8c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	e008      	b.n	80077e2 <HAL_TIM_PWM_Start+0x9e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b01      	cmp	r3, #1
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e0ab      	b.n	8007942 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_PWM_Start+0xb6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f8:	e023      	b.n	8007842 <HAL_TIM_PWM_Start+0xfe>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xc6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007808:	e01b      	b.n	8007842 <HAL_TIM_PWM_Start+0xfe>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d104      	bne.n	800781a <HAL_TIM_PWM_Start+0xd6>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007818:	e013      	b.n	8007842 <HAL_TIM_PWM_Start+0xfe>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b0c      	cmp	r3, #12
 800781e:	d104      	bne.n	800782a <HAL_TIM_PWM_Start+0xe6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007828:	e00b      	b.n	8007842 <HAL_TIM_PWM_Start+0xfe>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b10      	cmp	r3, #16
 800782e:	d104      	bne.n	800783a <HAL_TIM_PWM_Start+0xf6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007838:	e003      	b.n	8007842 <HAL_TIM_PWM_Start+0xfe>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fd26 	bl	800829c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3d      	ldr	r2, [pc, #244]	; (800794c <HAL_TIM_PWM_Start+0x208>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <HAL_TIM_PWM_Start+0x13e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3c      	ldr	r2, [pc, #240]	; (8007950 <HAL_TIM_PWM_Start+0x20c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_TIM_PWM_Start+0x13e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3a      	ldr	r2, [pc, #232]	; (8007954 <HAL_TIM_PWM_Start+0x210>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_TIM_PWM_Start+0x13e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a39      	ldr	r2, [pc, #228]	; (8007958 <HAL_TIM_PWM_Start+0x214>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIM_PWM_Start+0x13e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a37      	ldr	r2, [pc, #220]	; (800795c <HAL_TIM_PWM_Start+0x218>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d101      	bne.n	8007886 <HAL_TIM_PWM_Start+0x142>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <HAL_TIM_PWM_Start+0x144>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800789a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <HAL_TIM_PWM_Start+0x208>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d02c      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d027      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <HAL_TIM_PWM_Start+0x21c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a29      	ldr	r2, [pc, #164]	; (8007964 <HAL_TIM_PWM_Start+0x220>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01d      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a27      	ldr	r2, [pc, #156]	; (8007968 <HAL_TIM_PWM_Start+0x224>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1f      	ldr	r2, [pc, #124]	; (8007950 <HAL_TIM_PWM_Start+0x20c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a23      	ldr	r2, [pc, #140]	; (800796c <HAL_TIM_PWM_Start+0x228>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <HAL_TIM_PWM_Start+0x210>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <HAL_TIM_PWM_Start+0x22c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_TIM_PWM_Start+0x1bc>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1e      	ldr	r2, [pc, #120]	; (8007974 <HAL_TIM_PWM_Start+0x230>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d115      	bne.n	800792c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <HAL_TIM_PWM_Start+0x234>)
 8007908:	4013      	ands	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b06      	cmp	r3, #6
 8007910:	d015      	beq.n	800793e <HAL_TIM_PWM_Start+0x1fa>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007918:	d011      	beq.n	800793e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	e008      	b.n	800793e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e000      	b.n	8007940 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40010000 	.word	0x40010000
 8007950:	40010400 	.word	0x40010400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40001800 	.word	0x40001800
 8007970:	4000e000 	.word	0x4000e000
 8007974:	4000e400 	.word	0x4000e400
 8007978:	00010007 	.word	0x00010007

0800797c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007996:	2302      	movs	r3, #2
 8007998:	e0ff      	b.n	8007b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b14      	cmp	r3, #20
 80079a6:	f200 80f0 	bhi.w	8007b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007b8b 	.word	0x08007b8b
 80079b8:	08007b8b 	.word	0x08007b8b
 80079bc:	08007b8b 	.word	0x08007b8b
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007b8b 	.word	0x08007b8b
 80079c8:	08007b8b 	.word	0x08007b8b
 80079cc:	08007b8b 	.word	0x08007b8b
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	08007b8b 	.word	0x08007b8b
 80079d8:	08007b8b 	.word	0x08007b8b
 80079dc:	08007b8b 	.word	0x08007b8b
 80079e0:	08007ac7 	.word	0x08007ac7
 80079e4:	08007b8b 	.word	0x08007b8b
 80079e8:	08007b8b 	.word	0x08007b8b
 80079ec:	08007b8b 	.word	0x08007b8b
 80079f0:	08007b09 	.word	0x08007b09
 80079f4:	08007b8b 	.word	0x08007b8b
 80079f8:	08007b8b 	.word	0x08007b8b
 80079fc:	08007b8b 	.word	0x08007b8b
 8007a00:	08007b49 	.word	0x08007b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f970 	bl	8007cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0204 	bic.w	r2, r2, #4
 8007a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6999      	ldr	r1, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
      break;
 8007a42:	e0a5      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f9e0 	bl	8007e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	619a      	str	r2, [r3, #24]
      break;
 8007a84:	e084      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fa49 	bl	8007f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0204 	bic.w	r2, r2, #4
 8007ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69d9      	ldr	r1, [r3, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	61da      	str	r2, [r3, #28]
      break;
 8007ac4:	e064      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fab1 	bl	8008034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69d9      	ldr	r1, [r3, #28]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	021a      	lsls	r2, r3, #8
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	61da      	str	r2, [r3, #28]
      break;
 8007b06:	e043      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fafa 	bl	8008108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0204 	bic.w	r2, r2, #4
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b46:	e023      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb3e 	bl	80081d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	021a      	lsls	r2, r3, #8
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b88:	e002      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <TIM_Base_SetConfig+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d013      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc2:	d00f      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a41      	ldr	r2, [pc, #260]	; (8007ccc <TIM_Base_SetConfig+0x128>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a40      	ldr	r2, [pc, #256]	; (8007cd0 <TIM_Base_SetConfig+0x12c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3f      	ldr	r2, [pc, #252]	; (8007cd4 <TIM_Base_SetConfig+0x130>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3e      	ldr	r2, [pc, #248]	; (8007cd8 <TIM_Base_SetConfig+0x134>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d108      	bne.n	8007bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a33      	ldr	r2, [pc, #204]	; (8007cc8 <TIM_Base_SetConfig+0x124>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c04:	d023      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a30      	ldr	r2, [pc, #192]	; (8007ccc <TIM_Base_SetConfig+0x128>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01f      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2f      	ldr	r2, [pc, #188]	; (8007cd0 <TIM_Base_SetConfig+0x12c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01b      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2e      	ldr	r2, [pc, #184]	; (8007cd4 <TIM_Base_SetConfig+0x130>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d017      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2d      	ldr	r2, [pc, #180]	; (8007cd8 <TIM_Base_SetConfig+0x134>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2c      	ldr	r2, [pc, #176]	; (8007cdc <TIM_Base_SetConfig+0x138>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2b      	ldr	r2, [pc, #172]	; (8007ce0 <TIM_Base_SetConfig+0x13c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <TIM_Base_SetConfig+0x140>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <TIM_Base_SetConfig+0x144>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a28      	ldr	r2, [pc, #160]	; (8007cec <TIM_Base_SetConfig+0x148>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d108      	bne.n	8007c60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <TIM_Base_SetConfig+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00f      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a12      	ldr	r2, [pc, #72]	; (8007cd8 <TIM_Base_SetConfig+0x134>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00b      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <TIM_Base_SetConfig+0x138>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d007      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <TIM_Base_SetConfig+0x13c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0f      	ldr	r2, [pc, #60]	; (8007ce4 <TIM_Base_SetConfig+0x140>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d103      	bne.n	8007cb4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800
 8007ce8:	4000e000 	.word	0x4000e000
 8007cec:	4000e400 	.word	0x4000e400

08007cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4b37      	ldr	r3, [pc, #220]	; (8007df8 <TIM_OC1_SetConfig+0x108>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 0302 	bic.w	r3, r3, #2
 8007d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a2d      	ldr	r2, [pc, #180]	; (8007dfc <TIM_OC1_SetConfig+0x10c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <TIM_OC1_SetConfig+0x7c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <TIM_OC1_SetConfig+0x110>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_OC1_SetConfig+0x7c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a2b      	ldr	r2, [pc, #172]	; (8007e04 <TIM_OC1_SetConfig+0x114>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_OC1_SetConfig+0x7c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <TIM_OC1_SetConfig+0x118>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_OC1_SetConfig+0x7c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <TIM_OC1_SetConfig+0x11c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d10c      	bne.n	8007d86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0308 	bic.w	r3, r3, #8
 8007d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f023 0304 	bic.w	r3, r3, #4
 8007d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1c      	ldr	r2, [pc, #112]	; (8007dfc <TIM_OC1_SetConfig+0x10c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <TIM_OC1_SetConfig+0xbe>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <TIM_OC1_SetConfig+0x110>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00b      	beq.n	8007dae <TIM_OC1_SetConfig+0xbe>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1a      	ldr	r2, [pc, #104]	; (8007e04 <TIM_OC1_SetConfig+0x114>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <TIM_OC1_SetConfig+0xbe>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <TIM_OC1_SetConfig+0x118>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC1_SetConfig+0xbe>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <TIM_OC1_SetConfig+0x11c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d111      	bne.n	8007dd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	621a      	str	r2, [r3, #32]
}
 8007dec:	bf00      	nop
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	fffeff8f 	.word	0xfffeff8f
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800

08007e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f023 0210 	bic.w	r2, r3, #16
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4b34      	ldr	r3, [pc, #208]	; (8007f0c <TIM_OC2_SetConfig+0xfc>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f023 0320 	bic.w	r3, r3, #32
 8007e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <TIM_OC2_SetConfig+0x100>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC2_SetConfig+0x68>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <TIM_OC2_SetConfig+0x104>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10d      	bne.n	8007e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <TIM_OC2_SetConfig+0x100>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00f      	beq.n	8007ebc <TIM_OC2_SetConfig+0xac>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <TIM_OC2_SetConfig+0x104>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <TIM_OC2_SetConfig+0xac>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <TIM_OC2_SetConfig+0x108>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d007      	beq.n	8007ebc <TIM_OC2_SetConfig+0xac>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <TIM_OC2_SetConfig+0x10c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_OC2_SetConfig+0xac>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a1a      	ldr	r2, [pc, #104]	; (8007f20 <TIM_OC2_SetConfig+0x110>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d113      	bne.n	8007ee4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	feff8fff 	.word	0xfeff8fff
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40010400 	.word	0x40010400
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40014400 	.word	0x40014400
 8007f20:	40014800 	.word	0x40014800

08007f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4b33      	ldr	r3, [pc, #204]	; (800801c <TIM_OC3_SetConfig+0xf8>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a28      	ldr	r2, [pc, #160]	; (8008020 <TIM_OC3_SetConfig+0xfc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC3_SetConfig+0x66>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a27      	ldr	r2, [pc, #156]	; (8008024 <TIM_OC3_SetConfig+0x100>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10d      	bne.n	8007fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <TIM_OC3_SetConfig+0xfc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00f      	beq.n	8007fce <TIM_OC3_SetConfig+0xaa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <TIM_OC3_SetConfig+0x100>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00b      	beq.n	8007fce <TIM_OC3_SetConfig+0xaa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <TIM_OC3_SetConfig+0x104>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d007      	beq.n	8007fce <TIM_OC3_SetConfig+0xaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a1a      	ldr	r2, [pc, #104]	; (800802c <TIM_OC3_SetConfig+0x108>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_OC3_SetConfig+0xaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	; (8008030 <TIM_OC3_SetConfig+0x10c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d113      	bne.n	8007ff6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	621a      	str	r2, [r3, #32]
}
 8008010:	bf00      	nop
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	fffeff8f 	.word	0xfffeff8f
 8008020:	40010000 	.word	0x40010000
 8008024:	40010400 	.word	0x40010400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800

08008034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <TIM_OC4_SetConfig+0xbc>)
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	031b      	lsls	r3, r3, #12
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a19      	ldr	r2, [pc, #100]	; (80080f4 <TIM_OC4_SetConfig+0xc0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_OC4_SetConfig+0x80>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <TIM_OC4_SetConfig+0xc4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_OC4_SetConfig+0x80>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC4_SetConfig+0xc8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_OC4_SetConfig+0x80>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC4_SetConfig+0xcc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC4_SetConfig+0x80>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <TIM_OC4_SetConfig+0xd0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d109      	bne.n	80080c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	019b      	lsls	r3, r3, #6
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	feff8fff 	.word	0xfeff8fff
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40010400 	.word	0x40010400
 80080fc:	40014000 	.word	0x40014000
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800

08008108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <TIM_OC5_SetConfig+0xb0>)
 8008134:	4013      	ands	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	041b      	lsls	r3, r3, #16
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a18      	ldr	r2, [pc, #96]	; (80081bc <TIM_OC5_SetConfig+0xb4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00f      	beq.n	800817e <TIM_OC5_SetConfig+0x76>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <TIM_OC5_SetConfig+0xb8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00b      	beq.n	800817e <TIM_OC5_SetConfig+0x76>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <TIM_OC5_SetConfig+0xbc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <TIM_OC5_SetConfig+0x76>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <TIM_OC5_SetConfig+0xc0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d003      	beq.n	800817e <TIM_OC5_SetConfig+0x76>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <TIM_OC5_SetConfig+0xc4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d109      	bne.n	8008192 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	fffeff8f 	.word	0xfffeff8f
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40010400 	.word	0x40010400
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40014400 	.word	0x40014400
 80081cc:	40014800 	.word	0x40014800

080081d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4b22      	ldr	r3, [pc, #136]	; (8008284 <TIM_OC6_SetConfig+0xb4>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	051b      	lsls	r3, r3, #20
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a19      	ldr	r2, [pc, #100]	; (8008288 <TIM_OC6_SetConfig+0xb8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00f      	beq.n	8008248 <TIM_OC6_SetConfig+0x78>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <TIM_OC6_SetConfig+0xbc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00b      	beq.n	8008248 <TIM_OC6_SetConfig+0x78>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a17      	ldr	r2, [pc, #92]	; (8008290 <TIM_OC6_SetConfig+0xc0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <TIM_OC6_SetConfig+0x78>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a16      	ldr	r2, [pc, #88]	; (8008294 <TIM_OC6_SetConfig+0xc4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC6_SetConfig+0x78>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <TIM_OC6_SetConfig+0xc8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d109      	bne.n	800825c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	029b      	lsls	r3, r3, #10
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	feff8fff 	.word	0xfeff8fff
 8008288:	40010000 	.word	0x40010000
 800828c:	40010400 	.word	0x40010400
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800

0800829c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	2201      	movs	r2, #1
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	43db      	mvns	r3, r3
 80082be:	401a      	ands	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a1a      	ldr	r2, [r3, #32]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e077      	b.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a35      	ldr	r2, [pc, #212]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d004      	beq.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a34      	ldr	r2, [pc, #208]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d108      	bne.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800833a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a25      	ldr	r2, [pc, #148]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d02c      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008372:	d027      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a22      	ldr	r2, [pc, #136]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d022      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a21      	ldr	r2, [pc, #132]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d01d      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a1f      	ldr	r2, [pc, #124]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d018      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a1a      	ldr	r2, [pc, #104]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d013      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00e      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1a      	ldr	r2, [pc, #104]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a18      	ldr	r2, [pc, #96]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a17      	ldr	r2, [pc, #92]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d10c      	bne.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40001800 	.word	0x40001800
 8008414:	40014000 	.word	0x40014000
 8008418:	4000e000 	.word	0x4000e000
 800841c:	4000e400 	.word	0x4000e400

08008420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008438:	2302      	movs	r3, #2
 800843a:	e087      	b.n	800854c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	041b      	lsls	r3, r3, #16
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a27      	ldr	r2, [pc, #156]	; (8008558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a25      	ldr	r2, [pc, #148]	; (800855c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d106      	bne.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1d      	ldr	r2, [pc, #116]	; (800855c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d126      	bne.n	800853a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	051b      	lsls	r3, r3, #20
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a0e      	ldr	r2, [pc, #56]	; (8008558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a0d      	ldr	r2, [pc, #52]	; (800855c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d106      	bne.n	800853a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400

08008560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e042      	b.n	80085f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7f8 ff4d 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2224      	movs	r2, #36	; 0x24
 800858e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc5c 	bl	8008e60 <UART_SetConfig>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e022      	b.n	80085f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fabc 	bl	8009b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fb43 	bl	8009c7c <UART_CheckIdleState>
 80085f6:	4603      	mov	r3, r0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008614:	2b20      	cmp	r3, #32
 8008616:	d137      	bne.n	8008688 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_UART_Receive_DMA+0x24>
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e030      	b.n	800868a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a18      	ldr	r2, [pc, #96]	; (8008694 <HAL_UART_Receive_DMA+0x94>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d01f      	beq.n	8008678 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	613b      	str	r3, [r7, #16]
   return(result);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	69f9      	ldr	r1, [r7, #28]
 800866a:	6a3a      	ldr	r2, [r7, #32]
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	61bb      	str	r3, [r7, #24]
   return(result);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	461a      	mov	r2, r3
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f001 fc0e 	bl	8009ea0 <UART_Start_Receive_DMA>
 8008684:	4603      	mov	r3, r0
 8008686:	e000      	b.n	800868a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008688:	2302      	movs	r3, #2
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3728      	adds	r7, #40	; 0x28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	58000c00 	.word	0x58000c00

08008698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b0ba      	sub	sp, #232	; 0xe8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80086c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80086c6:	4013      	ands	r3, r2
 80086c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80086cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11b      	bne.n	800870c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d015      	beq.n	800870c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d009      	beq.n	800870c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8377 	beq.w	8008df0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
      }
      return;
 800870a:	e371      	b.n	8008df0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800870c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8123 	beq.w	800895c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008716:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800871a:	4b8d      	ldr	r3, [pc, #564]	; (8008950 <HAL_UART_IRQHandler+0x2b8>)
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008722:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008726:	4b8b      	ldr	r3, [pc, #556]	; (8008954 <HAL_UART_IRQHandler+0x2bc>)
 8008728:	4013      	ands	r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 8116 	beq.w	800895c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d011      	beq.n	8008760 <HAL_UART_IRQHandler+0xc8>
 800873c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2201      	movs	r2, #1
 800874e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008756:	f043 0201 	orr.w	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d011      	beq.n	8008790 <HAL_UART_IRQHandler+0xf8>
 800876c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2202      	movs	r2, #2
 800877e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008786:	f043 0204 	orr.w	r2, r3, #4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d011      	beq.n	80087c0 <HAL_UART_IRQHandler+0x128>
 800879c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2204      	movs	r2, #4
 80087ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b6:	f043 0202 	orr.w	r2, r3, #2
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d017      	beq.n	80087fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80087d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087dc:	4b5c      	ldr	r3, [pc, #368]	; (8008950 <HAL_UART_IRQHandler+0x2b8>)
 80087de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2208      	movs	r2, #8
 80087ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f2:	f043 0208 	orr.w	r2, r3, #8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <HAL_UART_IRQHandler+0x196>
 8008808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00c      	beq.n	800882e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800881c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008824:	f043 0220 	orr.w	r2, r3, #32
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 82dd 	beq.w	8008df4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d013      	beq.n	800886e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008882:	2b40      	cmp	r3, #64	; 0x40
 8008884:	d005      	beq.n	8008892 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800888a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800888e:	2b00      	cmp	r3, #0
 8008890:	d054      	beq.n	800893c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fbec 	bl	800a070 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d146      	bne.n	8008934 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3308      	adds	r3, #8
 80088ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1d9      	bne.n	80088a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d017      	beq.n	800892c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008902:	4a15      	ldr	r2, [pc, #84]	; (8008958 <HAL_UART_IRQHandler+0x2c0>)
 8008904:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800890c:	4618      	mov	r0, r3
 800890e:	f7fa fa2b 	bl	8002d68 <HAL_DMA_Abort_IT>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d019      	beq.n	800894c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008926:	4610      	mov	r0, r2
 8008928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892a:	e00f      	b.n	800894c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa81 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008932:	e00b      	b.n	800894c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa7d 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800893a:	e007      	b.n	800894c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa79 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800894a:	e253      	b.n	8008df4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894c:	bf00      	nop
    return;
 800894e:	e251      	b.n	8008df4 <HAL_UART_IRQHandler+0x75c>
 8008950:	10000001 	.word	0x10000001
 8008954:	04000120 	.word	0x04000120
 8008958:	0800a323 	.word	0x0800a323

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008960:	2b01      	cmp	r3, #1
 8008962:	f040 81e7 	bne.w	8008d34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	f003 0310 	and.w	r3, r3, #16
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 81e0 	beq.w	8008d34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 81d9 	beq.w	8008d34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2210      	movs	r2, #16
 8008988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	f040 8151 	bne.w	8008c3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a96      	ldr	r2, [pc, #600]	; (8008bfc <HAL_UART_IRQHandler+0x564>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d068      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a93      	ldr	r2, [pc, #588]	; (8008c00 <HAL_UART_IRQHandler+0x568>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d061      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a91      	ldr	r2, [pc, #580]	; (8008c04 <HAL_UART_IRQHandler+0x56c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d05a      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a8e      	ldr	r2, [pc, #568]	; (8008c08 <HAL_UART_IRQHandler+0x570>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d053      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a8c      	ldr	r2, [pc, #560]	; (8008c0c <HAL_UART_IRQHandler+0x574>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d04c      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a89      	ldr	r2, [pc, #548]	; (8008c10 <HAL_UART_IRQHandler+0x578>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d045      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a87      	ldr	r2, [pc, #540]	; (8008c14 <HAL_UART_IRQHandler+0x57c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d03e      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a84      	ldr	r2, [pc, #528]	; (8008c18 <HAL_UART_IRQHandler+0x580>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d037      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a82      	ldr	r2, [pc, #520]	; (8008c1c <HAL_UART_IRQHandler+0x584>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d030      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a7f      	ldr	r2, [pc, #508]	; (8008c20 <HAL_UART_IRQHandler+0x588>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d029      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a7d      	ldr	r2, [pc, #500]	; (8008c24 <HAL_UART_IRQHandler+0x58c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d022      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a7a      	ldr	r2, [pc, #488]	; (8008c28 <HAL_UART_IRQHandler+0x590>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d01b      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a78      	ldr	r2, [pc, #480]	; (8008c2c <HAL_UART_IRQHandler+0x594>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d014      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a75      	ldr	r2, [pc, #468]	; (8008c30 <HAL_UART_IRQHandler+0x598>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00d      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a73      	ldr	r2, [pc, #460]	; (8008c34 <HAL_UART_IRQHandler+0x59c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d006      	beq.n	8008a7a <HAL_UART_IRQHandler+0x3e2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a70      	ldr	r2, [pc, #448]	; (8008c38 <HAL_UART_IRQHandler+0x5a0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d106      	bne.n	8008a88 <HAL_UART_IRQHandler+0x3f0>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	e005      	b.n	8008a94 <HAL_UART_IRQHandler+0x3fc>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 81ab 	beq.w	8008df8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aac:	429a      	cmp	r2, r3
 8008aae:	f080 81a3 	bcs.w	8008df8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac8:	f000 8087 	beq.w	8008bda <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008afa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1da      	bne.n	8008acc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3308      	adds	r3, #8
 8008b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e1      	bne.n	8008b16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3308      	adds	r3, #8
 8008b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e3      	bne.n	8008b52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	f023 0310 	bic.w	r3, r3, #16
 8008bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e4      	bne.n	8008b98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7f9 fda9 	bl	800272c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f927 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bfa:	e0fd      	b.n	8008df8 <HAL_UART_IRQHandler+0x760>
 8008bfc:	40020010 	.word	0x40020010
 8008c00:	40020028 	.word	0x40020028
 8008c04:	40020040 	.word	0x40020040
 8008c08:	40020058 	.word	0x40020058
 8008c0c:	40020070 	.word	0x40020070
 8008c10:	40020088 	.word	0x40020088
 8008c14:	400200a0 	.word	0x400200a0
 8008c18:	400200b8 	.word	0x400200b8
 8008c1c:	40020410 	.word	0x40020410
 8008c20:	40020428 	.word	0x40020428
 8008c24:	40020440 	.word	0x40020440
 8008c28:	40020458 	.word	0x40020458
 8008c2c:	40020470 	.word	0x40020470
 8008c30:	40020488 	.word	0x40020488
 8008c34:	400204a0 	.word	0x400204a0
 8008c38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80cf 	beq.w	8008dfc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80ca 	beq.w	8008dfc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e4      	bne.n	8008c68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	623b      	str	r3, [r7, #32]
   return(result);
 8008cae:	6a3a      	ldr	r2, [r7, #32]
 8008cb0:	4b55      	ldr	r3, [pc, #340]	; (8008e08 <HAL_UART_IRQHandler+0x770>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e3      	bne.n	8008c9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0310 	bic.w	r3, r3, #16
 8008cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	69b9      	ldr	r1, [r7, #24]
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e4      	bne.n	8008cea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f88b 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d32:	e063      	b.n	8008dfc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00e      	beq.n	8008d5e <HAL_UART_IRQHandler+0x6c6>
 8008d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 fb24 	bl	800a3a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d5c:	e051      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d014      	beq.n	8008d94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d105      	bne.n	8008d82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d03a      	beq.n	8008e00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4798      	blx	r3
    }
    return;
 8008d92:	e035      	b.n	8008e00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <HAL_UART_IRQHandler+0x71c>
 8008da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 face 	bl	800a34e <UART_EndTransmit_IT>
    return;
 8008db2:	e026      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x73c>
 8008dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fafd 	bl	800a3cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dd2:	e016      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d010      	beq.n	8008e02 <HAL_UART_IRQHandler+0x76a>
 8008de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da0c      	bge.n	8008e02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fae5 	bl	800a3b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dee:	e008      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
      return;
 8008df0:	bf00      	nop
 8008df2:	e006      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
    return;
 8008df4:	bf00      	nop
 8008df6:	e004      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
      return;
 8008df8:	bf00      	nop
 8008dfa:	e002      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
      return;
 8008dfc:	bf00      	nop
 8008dfe:	e000      	b.n	8008e02 <HAL_UART_IRQHandler+0x76a>
    return;
 8008e00:	bf00      	nop
  }
}
 8008e02:	37e8      	adds	r7, #232	; 0xe8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	effffffe 	.word	0xeffffffe

08008e0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e64:	b092      	sub	sp, #72	; 0x48
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4bbe      	ldr	r3, [pc, #760]	; (8009188 <UART_SetConfig+0x328>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4ab3      	ldr	r2, [pc, #716]	; (800918c <UART_SetConfig+0x32c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d004      	beq.n	8008ecc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	4baf      	ldr	r3, [pc, #700]	; (8009190 <UART_SetConfig+0x330>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008edc:	430b      	orrs	r3, r1
 8008ede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	f023 010f 	bic.w	r1, r3, #15
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4aa6      	ldr	r2, [pc, #664]	; (8009194 <UART_SetConfig+0x334>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d177      	bne.n	8008ff0 <UART_SetConfig+0x190>
 8008f00:	4ba5      	ldr	r3, [pc, #660]	; (8009198 <UART_SetConfig+0x338>)
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f08:	2b28      	cmp	r3, #40	; 0x28
 8008f0a:	d86d      	bhi.n	8008fe8 <UART_SetConfig+0x188>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0xb4>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008fb9 	.word	0x08008fb9
 8008f18:	08008fe9 	.word	0x08008fe9
 8008f1c:	08008fe9 	.word	0x08008fe9
 8008f20:	08008fe9 	.word	0x08008fe9
 8008f24:	08008fe9 	.word	0x08008fe9
 8008f28:	08008fe9 	.word	0x08008fe9
 8008f2c:	08008fe9 	.word	0x08008fe9
 8008f30:	08008fe9 	.word	0x08008fe9
 8008f34:	08008fc1 	.word	0x08008fc1
 8008f38:	08008fe9 	.word	0x08008fe9
 8008f3c:	08008fe9 	.word	0x08008fe9
 8008f40:	08008fe9 	.word	0x08008fe9
 8008f44:	08008fe9 	.word	0x08008fe9
 8008f48:	08008fe9 	.word	0x08008fe9
 8008f4c:	08008fe9 	.word	0x08008fe9
 8008f50:	08008fe9 	.word	0x08008fe9
 8008f54:	08008fc9 	.word	0x08008fc9
 8008f58:	08008fe9 	.word	0x08008fe9
 8008f5c:	08008fe9 	.word	0x08008fe9
 8008f60:	08008fe9 	.word	0x08008fe9
 8008f64:	08008fe9 	.word	0x08008fe9
 8008f68:	08008fe9 	.word	0x08008fe9
 8008f6c:	08008fe9 	.word	0x08008fe9
 8008f70:	08008fe9 	.word	0x08008fe9
 8008f74:	08008fd1 	.word	0x08008fd1
 8008f78:	08008fe9 	.word	0x08008fe9
 8008f7c:	08008fe9 	.word	0x08008fe9
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08008fe9 	.word	0x08008fe9
 8008f8c:	08008fe9 	.word	0x08008fe9
 8008f90:	08008fe9 	.word	0x08008fe9
 8008f94:	08008fd9 	.word	0x08008fd9
 8008f98:	08008fe9 	.word	0x08008fe9
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08008fe9 	.word	0x08008fe9
 8008fa4:	08008fe9 	.word	0x08008fe9
 8008fa8:	08008fe9 	.word	0x08008fe9
 8008fac:	08008fe9 	.word	0x08008fe9
 8008fb0:	08008fe9 	.word	0x08008fe9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fbe:	e326      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc6:	e322      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fce:	e31e      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd6:	e31a      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fde:	e316      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe6:	e312      	b.n	800960e <UART_SetConfig+0x7ae>
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e30e      	b.n	800960e <UART_SetConfig+0x7ae>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a69      	ldr	r2, [pc, #420]	; (800919c <UART_SetConfig+0x33c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d130      	bne.n	800905c <UART_SetConfig+0x1fc>
 8008ffa:	4b67      	ldr	r3, [pc, #412]	; (8009198 <UART_SetConfig+0x338>)
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b05      	cmp	r3, #5
 8009004:	d826      	bhi.n	8009054 <UART_SetConfig+0x1f4>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x1ac>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009025 	.word	0x08009025
 8009010:	0800902d 	.word	0x0800902d
 8009014:	08009035 	.word	0x08009035
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	2300      	movs	r3, #0
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e2f0      	b.n	800960e <UART_SetConfig+0x7ae>
 800902c:	2304      	movs	r3, #4
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009032:	e2ec      	b.n	800960e <UART_SetConfig+0x7ae>
 8009034:	2308      	movs	r3, #8
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e2e8      	b.n	800960e <UART_SetConfig+0x7ae>
 800903c:	2310      	movs	r3, #16
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e2e4      	b.n	800960e <UART_SetConfig+0x7ae>
 8009044:	2320      	movs	r3, #32
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e2e0      	b.n	800960e <UART_SetConfig+0x7ae>
 800904c:	2340      	movs	r3, #64	; 0x40
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e2dc      	b.n	800960e <UART_SetConfig+0x7ae>
 8009054:	2380      	movs	r3, #128	; 0x80
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e2d8      	b.n	800960e <UART_SetConfig+0x7ae>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a4f      	ldr	r2, [pc, #316]	; (80091a0 <UART_SetConfig+0x340>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d130      	bne.n	80090c8 <UART_SetConfig+0x268>
 8009066:	4b4c      	ldr	r3, [pc, #304]	; (8009198 <UART_SetConfig+0x338>)
 8009068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	2b05      	cmp	r3, #5
 8009070:	d826      	bhi.n	80090c0 <UART_SetConfig+0x260>
 8009072:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <UART_SetConfig+0x218>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	08009091 	.word	0x08009091
 800907c:	08009099 	.word	0x08009099
 8009080:	080090a1 	.word	0x080090a1
 8009084:	080090a9 	.word	0x080090a9
 8009088:	080090b1 	.word	0x080090b1
 800908c:	080090b9 	.word	0x080090b9
 8009090:	2300      	movs	r3, #0
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e2ba      	b.n	800960e <UART_SetConfig+0x7ae>
 8009098:	2304      	movs	r3, #4
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e2b6      	b.n	800960e <UART_SetConfig+0x7ae>
 80090a0:	2308      	movs	r3, #8
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e2b2      	b.n	800960e <UART_SetConfig+0x7ae>
 80090a8:	2310      	movs	r3, #16
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e2ae      	b.n	800960e <UART_SetConfig+0x7ae>
 80090b0:	2320      	movs	r3, #32
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e2aa      	b.n	800960e <UART_SetConfig+0x7ae>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e2a6      	b.n	800960e <UART_SetConfig+0x7ae>
 80090c0:	2380      	movs	r3, #128	; 0x80
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e2a2      	b.n	800960e <UART_SetConfig+0x7ae>
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <UART_SetConfig+0x344>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d130      	bne.n	8009134 <UART_SetConfig+0x2d4>
 80090d2:	4b31      	ldr	r3, [pc, #196]	; (8009198 <UART_SetConfig+0x338>)
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	2b05      	cmp	r3, #5
 80090dc:	d826      	bhi.n	800912c <UART_SetConfig+0x2cc>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <UART_SetConfig+0x284>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	080090fd 	.word	0x080090fd
 80090e8:	08009105 	.word	0x08009105
 80090ec:	0800910d 	.word	0x0800910d
 80090f0:	08009115 	.word	0x08009115
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	08009125 	.word	0x08009125
 80090fc:	2300      	movs	r3, #0
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e284      	b.n	800960e <UART_SetConfig+0x7ae>
 8009104:	2304      	movs	r3, #4
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e280      	b.n	800960e <UART_SetConfig+0x7ae>
 800910c:	2308      	movs	r3, #8
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e27c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009114:	2310      	movs	r3, #16
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e278      	b.n	800960e <UART_SetConfig+0x7ae>
 800911c:	2320      	movs	r3, #32
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e274      	b.n	800960e <UART_SetConfig+0x7ae>
 8009124:	2340      	movs	r3, #64	; 0x40
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e270      	b.n	800960e <UART_SetConfig+0x7ae>
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e26c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <UART_SetConfig+0x348>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d142      	bne.n	80091c4 <UART_SetConfig+0x364>
 800913e:	4b16      	ldr	r3, [pc, #88]	; (8009198 <UART_SetConfig+0x338>)
 8009140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	2b05      	cmp	r3, #5
 8009148:	d838      	bhi.n	80091bc <UART_SetConfig+0x35c>
 800914a:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <UART_SetConfig+0x2f0>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	08009169 	.word	0x08009169
 8009154:	08009171 	.word	0x08009171
 8009158:	08009179 	.word	0x08009179
 800915c:	08009181 	.word	0x08009181
 8009160:	080091ad 	.word	0x080091ad
 8009164:	080091b5 	.word	0x080091b5
 8009168:	2300      	movs	r3, #0
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e24e      	b.n	800960e <UART_SetConfig+0x7ae>
 8009170:	2304      	movs	r3, #4
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e24a      	b.n	800960e <UART_SetConfig+0x7ae>
 8009178:	2308      	movs	r3, #8
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e246      	b.n	800960e <UART_SetConfig+0x7ae>
 8009180:	2310      	movs	r3, #16
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e242      	b.n	800960e <UART_SetConfig+0x7ae>
 8009188:	cfff69f3 	.word	0xcfff69f3
 800918c:	58000c00 	.word	0x58000c00
 8009190:	11fff4ff 	.word	0x11fff4ff
 8009194:	40011000 	.word	0x40011000
 8009198:	58024400 	.word	0x58024400
 800919c:	40004400 	.word	0x40004400
 80091a0:	40004800 	.word	0x40004800
 80091a4:	40004c00 	.word	0x40004c00
 80091a8:	40005000 	.word	0x40005000
 80091ac:	2320      	movs	r3, #32
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e22c      	b.n	800960e <UART_SetConfig+0x7ae>
 80091b4:	2340      	movs	r3, #64	; 0x40
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e228      	b.n	800960e <UART_SetConfig+0x7ae>
 80091bc:	2380      	movs	r3, #128	; 0x80
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e224      	b.n	800960e <UART_SetConfig+0x7ae>
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4ab1      	ldr	r2, [pc, #708]	; (8009490 <UART_SetConfig+0x630>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d176      	bne.n	80092bc <UART_SetConfig+0x45c>
 80091ce:	4bb1      	ldr	r3, [pc, #708]	; (8009494 <UART_SetConfig+0x634>)
 80091d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091d6:	2b28      	cmp	r3, #40	; 0x28
 80091d8:	d86c      	bhi.n	80092b4 <UART_SetConfig+0x454>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <UART_SetConfig+0x380>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009285 	.word	0x08009285
 80091e4:	080092b5 	.word	0x080092b5
 80091e8:	080092b5 	.word	0x080092b5
 80091ec:	080092b5 	.word	0x080092b5
 80091f0:	080092b5 	.word	0x080092b5
 80091f4:	080092b5 	.word	0x080092b5
 80091f8:	080092b5 	.word	0x080092b5
 80091fc:	080092b5 	.word	0x080092b5
 8009200:	0800928d 	.word	0x0800928d
 8009204:	080092b5 	.word	0x080092b5
 8009208:	080092b5 	.word	0x080092b5
 800920c:	080092b5 	.word	0x080092b5
 8009210:	080092b5 	.word	0x080092b5
 8009214:	080092b5 	.word	0x080092b5
 8009218:	080092b5 	.word	0x080092b5
 800921c:	080092b5 	.word	0x080092b5
 8009220:	08009295 	.word	0x08009295
 8009224:	080092b5 	.word	0x080092b5
 8009228:	080092b5 	.word	0x080092b5
 800922c:	080092b5 	.word	0x080092b5
 8009230:	080092b5 	.word	0x080092b5
 8009234:	080092b5 	.word	0x080092b5
 8009238:	080092b5 	.word	0x080092b5
 800923c:	080092b5 	.word	0x080092b5
 8009240:	0800929d 	.word	0x0800929d
 8009244:	080092b5 	.word	0x080092b5
 8009248:	080092b5 	.word	0x080092b5
 800924c:	080092b5 	.word	0x080092b5
 8009250:	080092b5 	.word	0x080092b5
 8009254:	080092b5 	.word	0x080092b5
 8009258:	080092b5 	.word	0x080092b5
 800925c:	080092b5 	.word	0x080092b5
 8009260:	080092a5 	.word	0x080092a5
 8009264:	080092b5 	.word	0x080092b5
 8009268:	080092b5 	.word	0x080092b5
 800926c:	080092b5 	.word	0x080092b5
 8009270:	080092b5 	.word	0x080092b5
 8009274:	080092b5 	.word	0x080092b5
 8009278:	080092b5 	.word	0x080092b5
 800927c:	080092b5 	.word	0x080092b5
 8009280:	080092ad 	.word	0x080092ad
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928a:	e1c0      	b.n	800960e <UART_SetConfig+0x7ae>
 800928c:	2304      	movs	r3, #4
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e1bc      	b.n	800960e <UART_SetConfig+0x7ae>
 8009294:	2308      	movs	r3, #8
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929a:	e1b8      	b.n	800960e <UART_SetConfig+0x7ae>
 800929c:	2310      	movs	r3, #16
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a2:	e1b4      	b.n	800960e <UART_SetConfig+0x7ae>
 80092a4:	2320      	movs	r3, #32
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092aa:	e1b0      	b.n	800960e <UART_SetConfig+0x7ae>
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b2:	e1ac      	b.n	800960e <UART_SetConfig+0x7ae>
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ba:	e1a8      	b.n	800960e <UART_SetConfig+0x7ae>
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a75      	ldr	r2, [pc, #468]	; (8009498 <UART_SetConfig+0x638>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d130      	bne.n	8009328 <UART_SetConfig+0x4c8>
 80092c6:	4b73      	ldr	r3, [pc, #460]	; (8009494 <UART_SetConfig+0x634>)
 80092c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	2b05      	cmp	r3, #5
 80092d0:	d826      	bhi.n	8009320 <UART_SetConfig+0x4c0>
 80092d2:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <UART_SetConfig+0x478>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	080092f1 	.word	0x080092f1
 80092dc:	080092f9 	.word	0x080092f9
 80092e0:	08009301 	.word	0x08009301
 80092e4:	08009309 	.word	0x08009309
 80092e8:	08009311 	.word	0x08009311
 80092ec:	08009319 	.word	0x08009319
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f6:	e18a      	b.n	800960e <UART_SetConfig+0x7ae>
 80092f8:	2304      	movs	r3, #4
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fe:	e186      	b.n	800960e <UART_SetConfig+0x7ae>
 8009300:	2308      	movs	r3, #8
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e182      	b.n	800960e <UART_SetConfig+0x7ae>
 8009308:	2310      	movs	r3, #16
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930e:	e17e      	b.n	800960e <UART_SetConfig+0x7ae>
 8009310:	2320      	movs	r3, #32
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e17a      	b.n	800960e <UART_SetConfig+0x7ae>
 8009318:	2340      	movs	r3, #64	; 0x40
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e176      	b.n	800960e <UART_SetConfig+0x7ae>
 8009320:	2380      	movs	r3, #128	; 0x80
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009326:	e172      	b.n	800960e <UART_SetConfig+0x7ae>
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a5b      	ldr	r2, [pc, #364]	; (800949c <UART_SetConfig+0x63c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d130      	bne.n	8009394 <UART_SetConfig+0x534>
 8009332:	4b58      	ldr	r3, [pc, #352]	; (8009494 <UART_SetConfig+0x634>)
 8009334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b05      	cmp	r3, #5
 800933c:	d826      	bhi.n	800938c <UART_SetConfig+0x52c>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x4e4>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009365 	.word	0x08009365
 800934c:	0800936d 	.word	0x0800936d
 8009350:	08009375 	.word	0x08009375
 8009354:	0800937d 	.word	0x0800937d
 8009358:	08009385 	.word	0x08009385
 800935c:	2300      	movs	r3, #0
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009362:	e154      	b.n	800960e <UART_SetConfig+0x7ae>
 8009364:	2304      	movs	r3, #4
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e150      	b.n	800960e <UART_SetConfig+0x7ae>
 800936c:	2308      	movs	r3, #8
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e14c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009374:	2310      	movs	r3, #16
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e148      	b.n	800960e <UART_SetConfig+0x7ae>
 800937c:	2320      	movs	r3, #32
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e144      	b.n	800960e <UART_SetConfig+0x7ae>
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e140      	b.n	800960e <UART_SetConfig+0x7ae>
 800938c:	2380      	movs	r3, #128	; 0x80
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e13c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a41      	ldr	r2, [pc, #260]	; (80094a0 <UART_SetConfig+0x640>)
 800939a:	4293      	cmp	r3, r2
 800939c:	f040 8082 	bne.w	80094a4 <UART_SetConfig+0x644>
 80093a0:	4b3c      	ldr	r3, [pc, #240]	; (8009494 <UART_SetConfig+0x634>)
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093a8:	2b28      	cmp	r3, #40	; 0x28
 80093aa:	d86d      	bhi.n	8009488 <UART_SetConfig+0x628>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <UART_SetConfig+0x554>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	08009459 	.word	0x08009459
 80093b8:	08009489 	.word	0x08009489
 80093bc:	08009489 	.word	0x08009489
 80093c0:	08009489 	.word	0x08009489
 80093c4:	08009489 	.word	0x08009489
 80093c8:	08009489 	.word	0x08009489
 80093cc:	08009489 	.word	0x08009489
 80093d0:	08009489 	.word	0x08009489
 80093d4:	08009461 	.word	0x08009461
 80093d8:	08009489 	.word	0x08009489
 80093dc:	08009489 	.word	0x08009489
 80093e0:	08009489 	.word	0x08009489
 80093e4:	08009489 	.word	0x08009489
 80093e8:	08009489 	.word	0x08009489
 80093ec:	08009489 	.word	0x08009489
 80093f0:	08009489 	.word	0x08009489
 80093f4:	08009469 	.word	0x08009469
 80093f8:	08009489 	.word	0x08009489
 80093fc:	08009489 	.word	0x08009489
 8009400:	08009489 	.word	0x08009489
 8009404:	08009489 	.word	0x08009489
 8009408:	08009489 	.word	0x08009489
 800940c:	08009489 	.word	0x08009489
 8009410:	08009489 	.word	0x08009489
 8009414:	08009471 	.word	0x08009471
 8009418:	08009489 	.word	0x08009489
 800941c:	08009489 	.word	0x08009489
 8009420:	08009489 	.word	0x08009489
 8009424:	08009489 	.word	0x08009489
 8009428:	08009489 	.word	0x08009489
 800942c:	08009489 	.word	0x08009489
 8009430:	08009489 	.word	0x08009489
 8009434:	08009479 	.word	0x08009479
 8009438:	08009489 	.word	0x08009489
 800943c:	08009489 	.word	0x08009489
 8009440:	08009489 	.word	0x08009489
 8009444:	08009489 	.word	0x08009489
 8009448:	08009489 	.word	0x08009489
 800944c:	08009489 	.word	0x08009489
 8009450:	08009489 	.word	0x08009489
 8009454:	08009481 	.word	0x08009481
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945e:	e0d6      	b.n	800960e <UART_SetConfig+0x7ae>
 8009460:	2304      	movs	r3, #4
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009466:	e0d2      	b.n	800960e <UART_SetConfig+0x7ae>
 8009468:	2308      	movs	r3, #8
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946e:	e0ce      	b.n	800960e <UART_SetConfig+0x7ae>
 8009470:	2310      	movs	r3, #16
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009476:	e0ca      	b.n	800960e <UART_SetConfig+0x7ae>
 8009478:	2320      	movs	r3, #32
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947e:	e0c6      	b.n	800960e <UART_SetConfig+0x7ae>
 8009480:	2340      	movs	r3, #64	; 0x40
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009486:	e0c2      	b.n	800960e <UART_SetConfig+0x7ae>
 8009488:	2380      	movs	r3, #128	; 0x80
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948e:	e0be      	b.n	800960e <UART_SetConfig+0x7ae>
 8009490:	40011400 	.word	0x40011400
 8009494:	58024400 	.word	0x58024400
 8009498:	40007800 	.word	0x40007800
 800949c:	40007c00 	.word	0x40007c00
 80094a0:	40011800 	.word	0x40011800
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4aad      	ldr	r2, [pc, #692]	; (8009760 <UART_SetConfig+0x900>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d176      	bne.n	800959c <UART_SetConfig+0x73c>
 80094ae:	4bad      	ldr	r3, [pc, #692]	; (8009764 <UART_SetConfig+0x904>)
 80094b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094b6:	2b28      	cmp	r3, #40	; 0x28
 80094b8:	d86c      	bhi.n	8009594 <UART_SetConfig+0x734>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <UART_SetConfig+0x660>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	08009565 	.word	0x08009565
 80094c4:	08009595 	.word	0x08009595
 80094c8:	08009595 	.word	0x08009595
 80094cc:	08009595 	.word	0x08009595
 80094d0:	08009595 	.word	0x08009595
 80094d4:	08009595 	.word	0x08009595
 80094d8:	08009595 	.word	0x08009595
 80094dc:	08009595 	.word	0x08009595
 80094e0:	0800956d 	.word	0x0800956d
 80094e4:	08009595 	.word	0x08009595
 80094e8:	08009595 	.word	0x08009595
 80094ec:	08009595 	.word	0x08009595
 80094f0:	08009595 	.word	0x08009595
 80094f4:	08009595 	.word	0x08009595
 80094f8:	08009595 	.word	0x08009595
 80094fc:	08009595 	.word	0x08009595
 8009500:	08009575 	.word	0x08009575
 8009504:	08009595 	.word	0x08009595
 8009508:	08009595 	.word	0x08009595
 800950c:	08009595 	.word	0x08009595
 8009510:	08009595 	.word	0x08009595
 8009514:	08009595 	.word	0x08009595
 8009518:	08009595 	.word	0x08009595
 800951c:	08009595 	.word	0x08009595
 8009520:	0800957d 	.word	0x0800957d
 8009524:	08009595 	.word	0x08009595
 8009528:	08009595 	.word	0x08009595
 800952c:	08009595 	.word	0x08009595
 8009530:	08009595 	.word	0x08009595
 8009534:	08009595 	.word	0x08009595
 8009538:	08009595 	.word	0x08009595
 800953c:	08009595 	.word	0x08009595
 8009540:	08009585 	.word	0x08009585
 8009544:	08009595 	.word	0x08009595
 8009548:	08009595 	.word	0x08009595
 800954c:	08009595 	.word	0x08009595
 8009550:	08009595 	.word	0x08009595
 8009554:	08009595 	.word	0x08009595
 8009558:	08009595 	.word	0x08009595
 800955c:	08009595 	.word	0x08009595
 8009560:	0800958d 	.word	0x0800958d
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e050      	b.n	800960e <UART_SetConfig+0x7ae>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e04c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e048      	b.n	800960e <UART_SetConfig+0x7ae>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e044      	b.n	800960e <UART_SetConfig+0x7ae>
 8009584:	2320      	movs	r3, #32
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e040      	b.n	800960e <UART_SetConfig+0x7ae>
 800958c:	2340      	movs	r3, #64	; 0x40
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e03c      	b.n	800960e <UART_SetConfig+0x7ae>
 8009594:	2380      	movs	r3, #128	; 0x80
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e038      	b.n	800960e <UART_SetConfig+0x7ae>
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a71      	ldr	r2, [pc, #452]	; (8009768 <UART_SetConfig+0x908>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d130      	bne.n	8009608 <UART_SetConfig+0x7a8>
 80095a6:	4b6f      	ldr	r3, [pc, #444]	; (8009764 <UART_SetConfig+0x904>)
 80095a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d826      	bhi.n	8009600 <UART_SetConfig+0x7a0>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <UART_SetConfig+0x758>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	2302      	movs	r3, #2
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e01a      	b.n	800960e <UART_SetConfig+0x7ae>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e016      	b.n	800960e <UART_SetConfig+0x7ae>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e012      	b.n	800960e <UART_SetConfig+0x7ae>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e00e      	b.n	800960e <UART_SetConfig+0x7ae>
 80095f0:	2320      	movs	r3, #32
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e00a      	b.n	800960e <UART_SetConfig+0x7ae>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e006      	b.n	800960e <UART_SetConfig+0x7ae>
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e002      	b.n	800960e <UART_SetConfig+0x7ae>
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a55      	ldr	r2, [pc, #340]	; (8009768 <UART_SetConfig+0x908>)
 8009614:	4293      	cmp	r3, r2
 8009616:	f040 80f8 	bne.w	800980a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800961a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800961e:	2b20      	cmp	r3, #32
 8009620:	dc46      	bgt.n	80096b0 <UART_SetConfig+0x850>
 8009622:	2b02      	cmp	r3, #2
 8009624:	db75      	blt.n	8009712 <UART_SetConfig+0x8b2>
 8009626:	3b02      	subs	r3, #2
 8009628:	2b1e      	cmp	r3, #30
 800962a:	d872      	bhi.n	8009712 <UART_SetConfig+0x8b2>
 800962c:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <UART_SetConfig+0x7d4>)
 800962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009632:	bf00      	nop
 8009634:	080096b7 	.word	0x080096b7
 8009638:	08009713 	.word	0x08009713
 800963c:	080096bf 	.word	0x080096bf
 8009640:	08009713 	.word	0x08009713
 8009644:	08009713 	.word	0x08009713
 8009648:	08009713 	.word	0x08009713
 800964c:	080096cf 	.word	0x080096cf
 8009650:	08009713 	.word	0x08009713
 8009654:	08009713 	.word	0x08009713
 8009658:	08009713 	.word	0x08009713
 800965c:	08009713 	.word	0x08009713
 8009660:	08009713 	.word	0x08009713
 8009664:	08009713 	.word	0x08009713
 8009668:	08009713 	.word	0x08009713
 800966c:	080096df 	.word	0x080096df
 8009670:	08009713 	.word	0x08009713
 8009674:	08009713 	.word	0x08009713
 8009678:	08009713 	.word	0x08009713
 800967c:	08009713 	.word	0x08009713
 8009680:	08009713 	.word	0x08009713
 8009684:	08009713 	.word	0x08009713
 8009688:	08009713 	.word	0x08009713
 800968c:	08009713 	.word	0x08009713
 8009690:	08009713 	.word	0x08009713
 8009694:	08009713 	.word	0x08009713
 8009698:	08009713 	.word	0x08009713
 800969c:	08009713 	.word	0x08009713
 80096a0:	08009713 	.word	0x08009713
 80096a4:	08009713 	.word	0x08009713
 80096a8:	08009713 	.word	0x08009713
 80096ac:	08009705 	.word	0x08009705
 80096b0:	2b40      	cmp	r3, #64	; 0x40
 80096b2:	d02a      	beq.n	800970a <UART_SetConfig+0x8aa>
 80096b4:	e02d      	b.n	8009712 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096b6:	f7fd fbcb 	bl	8006e50 <HAL_RCCEx_GetD3PCLK1Freq>
 80096ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096bc:	e02f      	b.n	800971e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd fbda 	bl	8006e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096cc:	e027      	b.n	800971e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ce:	f107 0318 	add.w	r3, r7, #24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fd fd26 	bl	8007124 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096dc:	e01f      	b.n	800971e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096de:	4b21      	ldr	r3, [pc, #132]	; (8009764 <UART_SetConfig+0x904>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ea:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <UART_SetConfig+0x904>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	08db      	lsrs	r3, r3, #3
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	4a1d      	ldr	r2, [pc, #116]	; (800976c <UART_SetConfig+0x90c>)
 80096f6:	fa22 f303 	lsr.w	r3, r2, r3
 80096fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096fc:	e00f      	b.n	800971e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80096fe:	4b1b      	ldr	r3, [pc, #108]	; (800976c <UART_SetConfig+0x90c>)
 8009700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009702:	e00c      	b.n	800971e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <UART_SetConfig+0x910>)
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009708:	e009      	b.n	800971e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009710:	e005      	b.n	800971e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800971c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800971e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 81ee 	beq.w	8009b02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	4a12      	ldr	r2, [pc, #72]	; (8009774 <UART_SetConfig+0x914>)
 800972c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009730:	461a      	mov	r2, r3
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	fbb3 f3f2 	udiv	r3, r3, r2
 8009738:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	4413      	add	r3, r2
 8009744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009746:	429a      	cmp	r2, r3
 8009748:	d305      	bcc.n	8009756 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009752:	429a      	cmp	r2, r3
 8009754:	d910      	bls.n	8009778 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800975c:	e1d1      	b.n	8009b02 <UART_SetConfig+0xca2>
 800975e:	bf00      	nop
 8009760:	40011c00 	.word	0x40011c00
 8009764:	58024400 	.word	0x58024400
 8009768:	58000c00 	.word	0x58000c00
 800976c:	03d09000 	.word	0x03d09000
 8009770:	003d0900 	.word	0x003d0900
 8009774:	0800a858 	.word	0x0800a858
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	2200      	movs	r2, #0
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	60fa      	str	r2, [r7, #12]
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	4ac0      	ldr	r2, [pc, #768]	; (8009a88 <UART_SetConfig+0xc28>)
 8009786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978a:	b29b      	uxth	r3, r3
 800978c:	2200      	movs	r2, #0
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800979a:	f7f6 fdb9 	bl	8000310 <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4610      	mov	r0, r2
 80097a4:	4619      	mov	r1, r3
 80097a6:	f04f 0200 	mov.w	r2, #0
 80097aa:	f04f 0300 	mov.w	r3, #0
 80097ae:	020b      	lsls	r3, r1, #8
 80097b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097b4:	0202      	lsls	r2, r0, #8
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	6849      	ldr	r1, [r1, #4]
 80097ba:	0849      	lsrs	r1, r1, #1
 80097bc:	2000      	movs	r0, #0
 80097be:	460c      	mov	r4, r1
 80097c0:	4605      	mov	r5, r0
 80097c2:	eb12 0804 	adds.w	r8, r2, r4
 80097c6:	eb43 0905 	adc.w	r9, r3, r5
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	469a      	mov	sl, r3
 80097d2:	4693      	mov	fp, r2
 80097d4:	4652      	mov	r2, sl
 80097d6:	465b      	mov	r3, fp
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f6 fd98 	bl	8000310 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4613      	mov	r3, r2
 80097e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ee:	d308      	bcc.n	8009802 <UART_SetConfig+0x9a2>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f6:	d204      	bcs.n	8009802 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097fe:	60da      	str	r2, [r3, #12]
 8009800:	e17f      	b.n	8009b02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009808:	e17b      	b.n	8009b02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009812:	f040 80bd 	bne.w	8009990 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009816:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800981a:	2b20      	cmp	r3, #32
 800981c:	dc48      	bgt.n	80098b0 <UART_SetConfig+0xa50>
 800981e:	2b00      	cmp	r3, #0
 8009820:	db7b      	blt.n	800991a <UART_SetConfig+0xaba>
 8009822:	2b20      	cmp	r3, #32
 8009824:	d879      	bhi.n	800991a <UART_SetConfig+0xaba>
 8009826:	a201      	add	r2, pc, #4	; (adr r2, 800982c <UART_SetConfig+0x9cc>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	080098b7 	.word	0x080098b7
 8009830:	080098bf 	.word	0x080098bf
 8009834:	0800991b 	.word	0x0800991b
 8009838:	0800991b 	.word	0x0800991b
 800983c:	080098c7 	.word	0x080098c7
 8009840:	0800991b 	.word	0x0800991b
 8009844:	0800991b 	.word	0x0800991b
 8009848:	0800991b 	.word	0x0800991b
 800984c:	080098d7 	.word	0x080098d7
 8009850:	0800991b 	.word	0x0800991b
 8009854:	0800991b 	.word	0x0800991b
 8009858:	0800991b 	.word	0x0800991b
 800985c:	0800991b 	.word	0x0800991b
 8009860:	0800991b 	.word	0x0800991b
 8009864:	0800991b 	.word	0x0800991b
 8009868:	0800991b 	.word	0x0800991b
 800986c:	080098e7 	.word	0x080098e7
 8009870:	0800991b 	.word	0x0800991b
 8009874:	0800991b 	.word	0x0800991b
 8009878:	0800991b 	.word	0x0800991b
 800987c:	0800991b 	.word	0x0800991b
 8009880:	0800991b 	.word	0x0800991b
 8009884:	0800991b 	.word	0x0800991b
 8009888:	0800991b 	.word	0x0800991b
 800988c:	0800991b 	.word	0x0800991b
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800991b 	.word	0x0800991b
 8009898:	0800991b 	.word	0x0800991b
 800989c:	0800991b 	.word	0x0800991b
 80098a0:	0800991b 	.word	0x0800991b
 80098a4:	0800991b 	.word	0x0800991b
 80098a8:	0800991b 	.word	0x0800991b
 80098ac:	0800990d 	.word	0x0800990d
 80098b0:	2b40      	cmp	r3, #64	; 0x40
 80098b2:	d02e      	beq.n	8009912 <UART_SetConfig+0xab2>
 80098b4:	e031      	b.n	800991a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b6:	f7fc f8ff 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 80098ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098bc:	e033      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098be:	f7fc f911 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 80098c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098c4:	e02f      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fad6 	bl	8006e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098d4:	e027      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d6:	f107 0318 	add.w	r3, r7, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd fc22 	bl	8007124 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e4:	e01f      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e6:	4b69      	ldr	r3, [pc, #420]	; (8009a8c <UART_SetConfig+0xc2c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098f2:	4b66      	ldr	r3, [pc, #408]	; (8009a8c <UART_SetConfig+0xc2c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	08db      	lsrs	r3, r3, #3
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	4a64      	ldr	r2, [pc, #400]	; (8009a90 <UART_SetConfig+0xc30>)
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009904:	e00f      	b.n	8009926 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009906:	4b62      	ldr	r3, [pc, #392]	; (8009a90 <UART_SetConfig+0xc30>)
 8009908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990a:	e00c      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800990c:	4b61      	ldr	r3, [pc, #388]	; (8009a94 <UART_SetConfig+0xc34>)
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009910:	e009      	b.n	8009926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009918:	e005      	b.n	8009926 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 80ea 	beq.w	8009b02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	4a55      	ldr	r2, [pc, #340]	; (8009a88 <UART_SetConfig+0xc28>)
 8009934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009938:	461a      	mov	r2, r3
 800993a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009940:	005a      	lsls	r2, r3, #1
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	441a      	add	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009952:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	2b0f      	cmp	r3, #15
 8009958:	d916      	bls.n	8009988 <UART_SetConfig+0xb28>
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009960:	d212      	bcs.n	8009988 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	b29b      	uxth	r3, r3
 8009966:	f023 030f 	bic.w	r3, r3, #15
 800996a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	b29a      	uxth	r2, r3
 8009978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800997a:	4313      	orrs	r3, r2
 800997c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	e0bc      	b.n	8009b02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800998e:	e0b8      	b.n	8009b02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009990:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009994:	2b20      	cmp	r3, #32
 8009996:	dc4b      	bgt.n	8009a30 <UART_SetConfig+0xbd0>
 8009998:	2b00      	cmp	r3, #0
 800999a:	f2c0 8087 	blt.w	8009aac <UART_SetConfig+0xc4c>
 800999e:	2b20      	cmp	r3, #32
 80099a0:	f200 8084 	bhi.w	8009aac <UART_SetConfig+0xc4c>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <UART_SetConfig+0xb4c>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	08009a37 	.word	0x08009a37
 80099b0:	08009a3f 	.word	0x08009a3f
 80099b4:	08009aad 	.word	0x08009aad
 80099b8:	08009aad 	.word	0x08009aad
 80099bc:	08009a47 	.word	0x08009a47
 80099c0:	08009aad 	.word	0x08009aad
 80099c4:	08009aad 	.word	0x08009aad
 80099c8:	08009aad 	.word	0x08009aad
 80099cc:	08009a57 	.word	0x08009a57
 80099d0:	08009aad 	.word	0x08009aad
 80099d4:	08009aad 	.word	0x08009aad
 80099d8:	08009aad 	.word	0x08009aad
 80099dc:	08009aad 	.word	0x08009aad
 80099e0:	08009aad 	.word	0x08009aad
 80099e4:	08009aad 	.word	0x08009aad
 80099e8:	08009aad 	.word	0x08009aad
 80099ec:	08009a67 	.word	0x08009a67
 80099f0:	08009aad 	.word	0x08009aad
 80099f4:	08009aad 	.word	0x08009aad
 80099f8:	08009aad 	.word	0x08009aad
 80099fc:	08009aad 	.word	0x08009aad
 8009a00:	08009aad 	.word	0x08009aad
 8009a04:	08009aad 	.word	0x08009aad
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009aad 	.word	0x08009aad
 8009a10:	08009aad 	.word	0x08009aad
 8009a14:	08009aad 	.word	0x08009aad
 8009a18:	08009aad 	.word	0x08009aad
 8009a1c:	08009aad 	.word	0x08009aad
 8009a20:	08009aad 	.word	0x08009aad
 8009a24:	08009aad 	.word	0x08009aad
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	08009a9f 	.word	0x08009a9f
 8009a30:	2b40      	cmp	r3, #64	; 0x40
 8009a32:	d037      	beq.n	8009aa4 <UART_SetConfig+0xc44>
 8009a34:	e03a      	b.n	8009aac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a36:	f7fc f83f 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8009a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a3c:	e03c      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a3e:	f7fc f851 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8009a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a44:	e038      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fd fa16 	bl	8006e7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a54:	e030      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a56:	f107 0318 	add.w	r3, r7, #24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd fb62 	bl	8007124 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a64:	e028      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <UART_SetConfig+0xc2c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d012      	beq.n	8009a98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <UART_SetConfig+0xc2c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	4a04      	ldr	r2, [pc, #16]	; (8009a90 <UART_SetConfig+0xc30>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a84:	e018      	b.n	8009ab8 <UART_SetConfig+0xc58>
 8009a86:	bf00      	nop
 8009a88:	0800a858 	.word	0x0800a858
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	03d09000 	.word	0x03d09000
 8009a94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009a98:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <UART_SetConfig+0xccc>)
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9c:	e00c      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <UART_SetConfig+0xcd0>)
 8009aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa2:	e009      	b.n	8009ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aaa:	e005      	b.n	8009ab8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d021      	beq.n	8009b02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	4a1c      	ldr	r2, [pc, #112]	; (8009b34 <UART_SetConfig+0xcd4>)
 8009ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	085b      	lsrs	r3, r3, #1
 8009ad6:	441a      	add	r2, r3
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	2b0f      	cmp	r3, #15
 8009ae6:	d909      	bls.n	8009afc <UART_SetConfig+0xc9c>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aee:	d205      	bcs.n	8009afc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60da      	str	r2, [r3, #12]
 8009afa:	e002      	b.n	8009b02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2200      	movs	r2, #0
 8009b16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009b1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3748      	adds	r7, #72	; 0x48
 8009b26:	46bd      	mov	sp, r7
 8009b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b2c:	03d09000 	.word	0x03d09000
 8009b30:	003d0900 	.word	0x003d0900
 8009b34:	0800a858 	.word	0x0800a858

08009b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01a      	beq.n	8009c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c36:	d10a      	bne.n	8009c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	605a      	str	r2, [r3, #4]
  }
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b098      	sub	sp, #96	; 0x60
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c8c:	f7f7 fe4a 	bl	8001924 <HAL_GetTick>
 8009c90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	d12f      	bne.n	8009d00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f88e 	bl	8009dd0 <UART_WaitOnFlagUntilTimeout>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d022      	beq.n	8009d00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cce:	653b      	str	r3, [r7, #80]	; 0x50
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8009cda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e6      	bne.n	8009cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e063      	b.n	8009dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d149      	bne.n	8009da2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d16:	2200      	movs	r2, #0
 8009d18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f857 	bl	8009dd0 <UART_WaitOnFlagUntilTimeout>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d03c      	beq.n	8009da2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	623b      	str	r3, [r7, #32]
   return(result);
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d46:	633b      	str	r3, [r7, #48]	; 0x30
 8009d48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e6      	bne.n	8009d28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	e853 3f00 	ldrex	r3, [r3]
 8009d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3308      	adds	r3, #8
 8009d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d7a:	61fa      	str	r2, [r7, #28]
 8009d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	69b9      	ldr	r1, [r7, #24]
 8009d80:	69fa      	ldr	r2, [r7, #28]
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	617b      	str	r3, [r7, #20]
   return(result);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e5      	bne.n	8009d5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e012      	b.n	8009dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3758      	adds	r7, #88	; 0x58
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de0:	e049      	b.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de8:	d045      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dea:	f7f7 fd9b 	bl	8001924 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d302      	bcc.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e048      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d031      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f003 0308 	and.w	r3, r3, #8
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d110      	bne.n	8009e42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2208      	movs	r2, #8
 8009e26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f921 	bl	800a070 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2208      	movs	r2, #8
 8009e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e029      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e50:	d111      	bne.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f907 	bl	800a070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e00f      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d0a6      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b096      	sub	sp, #88	; 0x58
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	88fa      	ldrh	r2, [r7, #6]
 8009eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2222      	movs	r2, #34	; 0x22
 8009ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d02d      	beq.n	8009f32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009edc:	4a40      	ldr	r2, [pc, #256]	; (8009fe0 <UART_Start_Receive_DMA+0x140>)
 8009ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ee6:	4a3f      	ldr	r2, [pc, #252]	; (8009fe4 <UART_Start_Receive_DMA+0x144>)
 8009ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef0:	4a3d      	ldr	r2, [pc, #244]	; (8009fe8 <UART_Start_Receive_DMA+0x148>)
 8009ef2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efa:	2200      	movs	r2, #0
 8009efc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3324      	adds	r3, #36	; 0x24
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f10:	461a      	mov	r2, r3
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	f7f8 f9a0 	bl	8002258 <HAL_DMA_Start_IT>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2210      	movs	r2, #16
 8009f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e051      	b.n	8009fd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d018      	beq.n	8009f6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f60:	e841 2300 	strex	r3, r2, [r1]
 8009f64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1e6      	bne.n	8009f3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3308      	adds	r3, #8
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	e853 3f00 	ldrex	r3, [r3]
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	653b      	str	r3, [r7, #80]	; 0x50
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f8c:	637a      	str	r2, [r7, #52]	; 0x34
 8009f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e5      	bne.n	8009f6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fc0:	623a      	str	r2, [r7, #32]
 8009fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	69f9      	ldr	r1, [r7, #28]
 8009fc6:	6a3a      	ldr	r2, [r7, #32]
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e5      	bne.n	8009fa0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3758      	adds	r7, #88	; 0x58
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	0800a13d 	.word	0x0800a13d
 8009fe4:	0800a265 	.word	0x0800a265
 8009fe8:	0800a2a3 	.word	0x0800a2a3

08009fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b08f      	sub	sp, #60	; 0x3c
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	61fb      	str	r3, [r7, #28]
   return(result);
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a008:	637b      	str	r3, [r7, #52]	; 0x34
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a014:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e6      	bne.n	8009ff4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	60bb      	str	r3, [r7, #8]
   return(result);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a03c:	633b      	str	r3, [r7, #48]	; 0x30
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a046:	61ba      	str	r2, [r7, #24]
 800a048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6979      	ldr	r1, [r7, #20]
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	613b      	str	r3, [r7, #16]
   return(result);
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e5      	bne.n	800a026 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a062:	bf00      	nop
 800a064:	373c      	adds	r7, #60	; 0x3c
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
	...

0800a070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b095      	sub	sp, #84	; 0x54
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a08c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a096:	643b      	str	r3, [r7, #64]	; 0x40
 800a098:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a09c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e6      	bne.n	800a078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <UART_EndRxTransfer+0xc8>)
 800a0be:	4013      	ands	r3, r2
 800a0c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e5      	bne.n	800a0aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d118      	bne.n	800a118 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f023 0310 	bic.w	r3, r3, #16
 800a0fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a104:	61bb      	str	r3, [r7, #24]
 800a106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6979      	ldr	r1, [r7, #20]
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	613b      	str	r3, [r7, #16]
   return(result);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e6      	bne.n	800a0e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a12c:	bf00      	nop
 800a12e:	3754      	adds	r7, #84	; 0x54
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	effffffe 	.word	0xeffffffe

0800a13c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b09c      	sub	sp, #112	; 0x70
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d071      	beq.n	800a238 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a156:	2200      	movs	r2, #0
 800a158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a16c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a170:	66bb      	str	r3, [r7, #104]	; 0x68
 800a172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a17a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a17c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e6      	bne.n	800a15c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3308      	adds	r3, #8
 800a194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	f023 0301 	bic.w	r3, r3, #1
 800a1a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1ae:	647a      	str	r2, [r7, #68]	; 0x44
 800a1b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e5      	bne.n	800a18e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d8:	663b      	str	r3, [r7, #96]	; 0x60
 800a1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3308      	adds	r3, #8
 800a1e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1e2:	633a      	str	r2, [r7, #48]	; 0x30
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ea:	e841 2300 	strex	r3, r2, [r1]
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1e5      	bne.n	800a1c2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a202:	2b01      	cmp	r3, #1
 800a204:	d118      	bne.n	800a238 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	60fb      	str	r3, [r7, #12]
   return(result);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0310 	bic.w	r3, r3, #16
 800a21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	69b9      	ldr	r1, [r7, #24]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	617b      	str	r3, [r7, #20]
   return(result);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e6      	bne.n	800a206 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a23a:	2200      	movs	r2, #0
 800a23c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d107      	bne.n	800a256 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a24c:	4619      	mov	r1, r3
 800a24e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a250:	f7fe fdfa 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a254:	e002      	b.n	800a25c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a256:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a258:	f7f6 fa04 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 800a25c:	bf00      	nop
 800a25e:	3770      	adds	r7, #112	; 0x70
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d109      	bne.n	800a294 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4619      	mov	r1, r3
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7fe fddb 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a292:	e002      	b.n	800a29a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fe fdc3 	bl	8008e20 <HAL_UART_RxHalfCpltCallback>
}
 800a29a:	bf00      	nop
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b086      	sub	sp, #24
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ca:	2b80      	cmp	r3, #128	; 0x80
 800a2cc:	d109      	bne.n	800a2e2 <UART_DMAError+0x40>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b21      	cmp	r3, #33	; 0x21
 800a2d2:	d106      	bne.n	800a2e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a2dc:	6978      	ldr	r0, [r7, #20]
 800a2de:	f7ff fe85 	bl	8009fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	d109      	bne.n	800a304 <UART_DMAError+0x62>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b22      	cmp	r3, #34	; 0x22
 800a2f4:	d106      	bne.n	800a304 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a2fe:	6978      	ldr	r0, [r7, #20]
 800a300:	f7ff feb6 	bl	800a070 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30a:	f043 0210 	orr.w	r2, r3, #16
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a314:	6978      	ldr	r0, [r7, #20]
 800a316:	f7fe fd8d 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a31a:	bf00      	nop
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7fe fd77 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b088      	sub	sp, #32
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	60bb      	str	r3, [r7, #8]
   return(result);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a36a:	61fb      	str	r3, [r7, #28]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6979      	ldr	r1, [r7, #20]
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	613b      	str	r3, [r7, #16]
   return(result);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e6      	bne.n	800a356 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fe fd38 	bl	8008e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a39c:	bf00      	nop
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e027      	b.n	800a446 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2224      	movs	r2, #36	; 0x24
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0201 	bic.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a424:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a462:	2b01      	cmp	r3, #1
 800a464:	d101      	bne.n	800a46a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a466:	2302      	movs	r3, #2
 800a468:	e02d      	b.n	800a4c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2224      	movs	r2, #36	; 0x24
 800a476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0201 	bic.w	r2, r2, #1
 800a490:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f850 	bl	800a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e02d      	b.n	800a542 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2224      	movs	r2, #36	; 0x24
 800a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 0201 	bic.w	r2, r2, #1
 800a50c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f812 	bl	800a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2220      	movs	r2, #32
 800a534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d108      	bne.n	800a56e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a56c:	e031      	b.n	800a5d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a56e:	2310      	movs	r3, #16
 800a570:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a572:	2310      	movs	r3, #16
 800a574:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	0e5b      	lsrs	r3, r3, #25
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0307 	and.w	r3, r3, #7
 800a584:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	0f5b      	lsrs	r3, r3, #29
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 0307 	and.w	r3, r3, #7
 800a594:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	7b3a      	ldrb	r2, [r7, #12]
 800a59a:	4911      	ldr	r1, [pc, #68]	; (800a5e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a59c:	5c8a      	ldrb	r2, [r1, r2]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5a2:	7b3a      	ldrb	r2, [r7, #12]
 800a5a4:	490f      	ldr	r1, [pc, #60]	; (800a5e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	7b7a      	ldrb	r2, [r7, #13]
 800a5b8:	4909      	ldr	r1, [pc, #36]	; (800a5e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a5ba:	5c8a      	ldrb	r2, [r1, r2]
 800a5bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5c0:	7b7a      	ldrb	r2, [r7, #13]
 800a5c2:	4908      	ldr	r1, [pc, #32]	; (800a5e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	0800a870 	.word	0x0800a870
 800a5e4:	0800a878 	.word	0x0800a878

0800a5e8 <__libc_init_array>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	4d0d      	ldr	r5, [pc, #52]	; (800a620 <__libc_init_array+0x38>)
 800a5ec:	4c0d      	ldr	r4, [pc, #52]	; (800a624 <__libc_init_array+0x3c>)
 800a5ee:	1b64      	subs	r4, r4, r5
 800a5f0:	10a4      	asrs	r4, r4, #2
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	d109      	bne.n	800a60c <__libc_init_array+0x24>
 800a5f8:	4d0b      	ldr	r5, [pc, #44]	; (800a628 <__libc_init_array+0x40>)
 800a5fa:	4c0c      	ldr	r4, [pc, #48]	; (800a62c <__libc_init_array+0x44>)
 800a5fc:	f000 f894 	bl	800a728 <_init>
 800a600:	1b64      	subs	r4, r4, r5
 800a602:	10a4      	asrs	r4, r4, #2
 800a604:	2600      	movs	r6, #0
 800a606:	42a6      	cmp	r6, r4
 800a608:	d105      	bne.n	800a616 <__libc_init_array+0x2e>
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a610:	4798      	blx	r3
 800a612:	3601      	adds	r6, #1
 800a614:	e7ee      	b.n	800a5f4 <__libc_init_array+0xc>
 800a616:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61a:	4798      	blx	r3
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7f2      	b.n	800a606 <__libc_init_array+0x1e>
 800a620:	0800a888 	.word	0x0800a888
 800a624:	0800a888 	.word	0x0800a888
 800a628:	0800a888 	.word	0x0800a888
 800a62c:	0800a88c 	.word	0x0800a88c

0800a630 <memset>:
 800a630:	4402      	add	r2, r0
 800a632:	4603      	mov	r3, r0
 800a634:	4293      	cmp	r3, r2
 800a636:	d100      	bne.n	800a63a <memset+0xa>
 800a638:	4770      	bx	lr
 800a63a:	f803 1b01 	strb.w	r1, [r3], #1
 800a63e:	e7f9      	b.n	800a634 <memset+0x4>

0800a640 <floor>:
 800a640:	ee10 1a90 	vmov	r1, s1
 800a644:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a648:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a64c:	2b13      	cmp	r3, #19
 800a64e:	b530      	push	{r4, r5, lr}
 800a650:	ee10 0a10 	vmov	r0, s0
 800a654:	ee10 5a10 	vmov	r5, s0
 800a658:	dc31      	bgt.n	800a6be <floor+0x7e>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	da15      	bge.n	800a68a <floor+0x4a>
 800a65e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a718 <floor+0xd8>
 800a662:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a666:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66e:	dd07      	ble.n	800a680 <floor+0x40>
 800a670:	2900      	cmp	r1, #0
 800a672:	da4e      	bge.n	800a712 <floor+0xd2>
 800a674:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a678:	4318      	orrs	r0, r3
 800a67a:	d001      	beq.n	800a680 <floor+0x40>
 800a67c:	4928      	ldr	r1, [pc, #160]	; (800a720 <floor+0xe0>)
 800a67e:	2000      	movs	r0, #0
 800a680:	460b      	mov	r3, r1
 800a682:	4602      	mov	r2, r0
 800a684:	ec43 2b10 	vmov	d0, r2, r3
 800a688:	e020      	b.n	800a6cc <floor+0x8c>
 800a68a:	4a26      	ldr	r2, [pc, #152]	; (800a724 <floor+0xe4>)
 800a68c:	411a      	asrs	r2, r3
 800a68e:	ea01 0402 	and.w	r4, r1, r2
 800a692:	4304      	orrs	r4, r0
 800a694:	d01a      	beq.n	800a6cc <floor+0x8c>
 800a696:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a718 <floor+0xd8>
 800a69a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a69e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a6:	ddeb      	ble.n	800a680 <floor+0x40>
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	bfbe      	ittt	lt
 800a6ac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a6b0:	fa40 f303 	asrlt.w	r3, r0, r3
 800a6b4:	18c9      	addlt	r1, r1, r3
 800a6b6:	ea21 0102 	bic.w	r1, r1, r2
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e7e0      	b.n	800a680 <floor+0x40>
 800a6be:	2b33      	cmp	r3, #51	; 0x33
 800a6c0:	dd05      	ble.n	800a6ce <floor+0x8e>
 800a6c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c6:	d101      	bne.n	800a6cc <floor+0x8c>
 800a6c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a6cc:	bd30      	pop	{r4, r5, pc}
 800a6ce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6d6:	40e2      	lsrs	r2, r4
 800a6d8:	4202      	tst	r2, r0
 800a6da:	d0f7      	beq.n	800a6cc <floor+0x8c>
 800a6dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a718 <floor+0xd8>
 800a6e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a6e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	ddc8      	ble.n	800a680 <floor+0x40>
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	da02      	bge.n	800a6f8 <floor+0xb8>
 800a6f2:	2b14      	cmp	r3, #20
 800a6f4:	d103      	bne.n	800a6fe <floor+0xbe>
 800a6f6:	3101      	adds	r1, #1
 800a6f8:	ea20 0002 	bic.w	r0, r0, r2
 800a6fc:	e7c0      	b.n	800a680 <floor+0x40>
 800a6fe:	2401      	movs	r4, #1
 800a700:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a704:	fa04 f303 	lsl.w	r3, r4, r3
 800a708:	4418      	add	r0, r3
 800a70a:	42a8      	cmp	r0, r5
 800a70c:	bf38      	it	cc
 800a70e:	1909      	addcc	r1, r1, r4
 800a710:	e7f2      	b.n	800a6f8 <floor+0xb8>
 800a712:	2000      	movs	r0, #0
 800a714:	4601      	mov	r1, r0
 800a716:	e7b3      	b.n	800a680 <floor+0x40>
 800a718:	8800759c 	.word	0x8800759c
 800a71c:	7e37e43c 	.word	0x7e37e43c
 800a720:	bff00000 	.word	0xbff00000
 800a724:	000fffff 	.word	0x000fffff

0800a728 <_init>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr

0800a734 <_fini>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr
